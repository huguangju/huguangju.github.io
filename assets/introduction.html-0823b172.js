import{_ as e,W as p,X as o,Y as s,Z as n,$ as i,a0 as a,C as r}from"./framework-5f3abea5.js";const l={},c=a(`<p>TypeScript 能让代码更好地弹性伸缩，它开发的程序更安全（类型安全）。</p><blockquote><p>类型安全：借助类型避免程序做无效的事情。</p></blockquote><p>TypeScript 除了消除与类型有关的一整类问题之外，还彻底改变了编写代码的方式，先在类型层面规划整个程序，再深入到值层面。 在设计过程中考虑边缘情况，使程序更简单、运行更快，且更易于理解和维护。</p><h2 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器" aria-hidden="true">#</a> 编译器</h2><p>程序由一些文件构成，并由编译器解析，转换成抽象句法树（abstract syntax tree，AST）。编译器把 AST 转换成一种称为字节码（bytecode）的低层表示。</p><blockquote><p>AST 是去掉了空白、注释和缩进用的制表符或空格之后的数据结构。</p></blockquote><p>运行程序：就是让运行时计算由编译器从源码解析得来的 AST 生成的字节码。步骤如下：</p><ol><li>把程序解析为 AST</li><li>把 AST 编译成字节码</li><li>运行时计算字节码</li></ol><p>TypeScript 特殊之处：不直接编译成字节码，而是编译成 JavaScript 代码。</p><div class="hint-container info"><p class="hint-container-title">TypeScript 是如何让代码更安全呢？</p><p>TypeScript 编译器生成 AST 之后，真正运行代码前，会对代码做<strong>类型检查</strong>。</p><blockquote><p><strong>类型检查器</strong>：检查代码是否符合<strong>类型安全要求</strong>的特殊程序。</p></blockquote></div><p>使用 TypeScript，会在原来的编译流程上前置以下流程：</p><ol><li>TypeScript 源码 -&gt; TypeScript AST</li><li>类型检查器检查 AST</li><li>TypeScript AST -&gt; JavaScript 源码</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>程序中的类型对程序生成的输出没有任何影响，类型只在类型检查（第 2 步）这一步使用。意味着，可以随时更新类型，而不会破坏应用功能。</p></div><h2 id="类型系统" tabindex="-1"><a class="header-anchor" href="#类型系统" aria-hidden="true">#</a> 类型系统</h2><blockquote><p>类型系统：类型检查器为程序<strong>分配类型</strong>时使用的一系列<strong>规则</strong>。</p></blockquote><p>类型系统有两种：</p><ol><li>显式注解（形式：<code>value: type</code>，仅在必要时使用）</li><li>自动推导（推荐）</li></ol><h3 id="typescript-vs-javascript" tabindex="-1"><a class="header-anchor" href="#typescript-vs-javascript" aria-hidden="true">#</a> TypeScript VS. JavaScript</h3><table><thead><tr><th>类型系统特性</th><th>JavaScript</th><th>TypeScript</th></tr></thead><tbody><tr><td>类型是如何绑定的？</td><td>动态</td><td>静态</td></tr><tr><td>是否自动转换类型</td><td>是</td><td>否（多数时候）</td></tr><tr><td>何时检查类型？</td><td>运行时</td><td>编译时</td></tr><tr><td>何时报告错误</td><td>运行时</td><td>编译时（多数时候）</td></tr></tbody></table><p>JavaScript 是<strong>动态绑定</strong>的，在程序运行时才知道类型。</p><p>TypeScript 是<strong>渐进式类型语言</strong>，在编译时可以知道类型（即使没有类型，也能部分推导）。</p><p>JavaScript 是<strong>弱类型语言</strong>，执行无效操作也会进行<strong>隐式转换</strong>。</p><p>TypeScript 会在<strong>编译时</strong>对代码做类型检查，会对代码做<strong>静态分析</strong>。如时输入代码有错，会在编辑器内输入代码时显示，极大缩短了反馈时间。</p><h2 id="代码编辑器设置" tabindex="-1"><a class="header-anchor" href="#代码编辑器设置" aria-hidden="true">#</a> 代码编辑器设置</h2><p>初始化 TypeScript 项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> hello-ts
<span class="token builtin class-name">cd</span> hello-ts

<span class="token function">npm</span> init
<span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript tslint @types/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tsconfg-json" tabindex="-1"><a class="header-anchor" href="#tsconfg-json" aria-hidden="true">#</a> tsconfg.json</h3><p>放在 TypeScript 项目根目录，用于定义要编译的源文件、目标目录、运行时版本等。</p><p>在根目录新建 tsconfig.json 文件（也可通过 <code>tsc --init</code> 生成），写入：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es2015&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;src&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简要介绍一下部分选项的作用：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>include</td><td>指定要编译的文件或目录的路径，支持通配符。默认为 [&quot;**/*&quot;]。</td></tr><tr><td>lib</td><td>指定要包含的库文件的列表。默认为 [&quot;dom&quot;, &quot;es5&quot;, &quot;es2015.promise&quot;]。</td></tr><tr><td>module</td><td>指定要使用的模块系统。可选值为 &quot;CommonJS&quot;、&quot;SystemJs&quot;、&quot;umd&quot;、&quot;ES2015&quot; 等。默认为 &quot;commonjs&quot;。</td></tr><tr><td>outDir</td><td>指定编译输出目录的路径。默认为 &quot;./dist&quot;。</td></tr><tr><td>strict</td><td>开启所有严格类型检查选项。可选值为 true 或 false。默认为 false。</td></tr><tr><td>target</td><td>指定编译后的 JavaScript 代码目标版本。可选值为 &quot;ES3&quot;、&quot;ES5&quot;、&quot;ES2015&quot;、&quot;ES2016&quot; 等。</td></tr></tbody></table><p>这些选项很少改动，偶尔需切换打包工具时修改 module 和 target 设置，需在浏览器中运行时在 lib 中添加 &quot;dom&quot;。</p><p>使用 tsconfig.json 可把配置纳入源码控制。可通过 <code>tsc --help</code> 命令查看更多选项。</p><h3 id="eslint-json" tabindex="-1"><a class="header-anchor" href="#eslint-json" aria-hidden="true">#</a> eslint.json</h3><blockquote><p>原文使用的是 TSLint，其官方维护已于 2019 年停止，会与 ESLint 合并，因此推荐使用 ESLint 代替 TSLint。</p></blockquote><p>生成默认配置的 .eslintrc.js 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 根据提示操作</span>
npx eslint <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@typescript-eslint/parser&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),d={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},u=a(`<h3 id="index-ts" tabindex="-1"><a class="header-anchor" href="#index-ts" aria-hidden="true">#</a> index.ts</h3><p>创建第一个 TypeScript 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> src
hello-ts <span class="token function">touch</span> src/index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 index.ts 中输入代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello TypeScript!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译并运行 TypeScript 代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc

<span class="token function">node</span> ./dist/index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台将看到一条日志：Hello TypeScript!</p>`,8);function v(k,b){const t=r("ExternalLinkIcon");return p(),o("div",null,[c,s("p",null,[n("完整的规则列表参见 "),s("a",d,[n("ESLint 文档"),i(t)]),n("。")]),u])}const h=e(l,[["render",v],["__file","introduction.html.vue"]]);export{h as default};
