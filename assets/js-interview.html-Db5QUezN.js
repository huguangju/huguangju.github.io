import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,o as t}from"./app-C_1RVQww.js";const r={};function n(o,e){return t(),l("div",null,e[0]||(e[0]=[a('<h2 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h2><ul><li>语法： <ul><li>数据类型、作用域、原型链、继承、事件循环、闭包、this 指向</li><li>ES6: 箭头函数、Promise、async/await、Proxy、Set/Map、Symbol、生成器</li></ul></li><li>应用：节流与防抖、深拷贝、跨域、并发控制、尾递归优化</li><li>打包构建：模块化、Webpack、babel、rollup、vite</li><li>性能优化：首屏速度、大数据渲染、懒加载、代码优化、构建优化</li></ul><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h2><h3 id="变量和类型" tabindex="-1"><a class="header-anchor" href="#变量和类型"><span>变量和类型</span></a></h3><ul><li>如何理解值类型和引用类型？</li><li>有哪些判断类型的方式？以及它们的优缺点</li><li>可能发生隐式类型转换的场景以及转换原则</li></ul><h3 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链"><span>原型和原型链</span></a></h3><ul><li><code>New</code> 的实现原理？</li><li>有哪些方式可以实现继承？分别有哪些优缺点？</li><li>call/apply/bind 实现原理是什么？</li><li><code>instanceof</code> 的底层实现原理，如何实现一个 instanceof？</li><li>理解 ES6 class 构造以及继承的底层实现原理</li></ul><h3 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包"><span>作用域和闭包</span></a></h3><ul><li>理解词法作用域和动态作用域</li><li>对 JS 执行上下文栈和作用域链的理解？</li><li>什么是闭包？闭包的使用场景？</li><li><code>this</code> 的原理？如何正确判断 <code>this</code> 指向？</li><li>如何处理循环的异步操作？</li><li>理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理</li></ul><h3 id="执行机制" tabindex="-1"><a class="header-anchor" href="#执行机制"><span>执行机制</span></a></h3><ul><li>为何 <code>try</code> 里面放 <code>return</code>，<code>finally</code> 还会执行，理解其内部机制</li><li>什么是异步编程？JS 是如何实现的？</li><li>详述事件循环（Even Loop）机制</li><li>什么是宏任务（MacroTask）和微任务（MicroTask）？以及它们的区别及应用？</li><li>DOM 事件和事件循环的关系？</li></ul><h3 id="语法和api" tabindex="-1"><a class="header-anchor" href="#语法和api"><span>语法和API</span></a></h3><ul><li>async/await 和 Promise 有什么关系？</li><li>熟练应用 map、reduce、filter 等高阶函数解决问题</li><li>常用正则表达式（邮箱校验、URL解析、去重等）</li><li>介绍下 Map、Set、WeakMap 和 WeakSet 的区别？</li><li>异常处理的方式，统一的异常处理方案</li></ul><h3 id="web-api" tabindex="-1"><a class="header-anchor" href="#web-api"><span>Web API</span></a></h3><ul><li>DOM 节点操作有哪些方式？</li><li>如何优化 DOM 操作的性能？</li><li>事件传播的三个阶段是什么？描述事件绑定和冒泡的过程？</li><li>什么是事件代理？</li><li>如何理解 cookie？</li><li>localStorage、SessionStorage 和 cookie 的区别？</li><li>如何实现网页多标签 tab 通讯</li><li>如何实现网页和 iframe 之间的通讯</li></ul><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h3><ul><li>防抖函数的作用是什么？如何实现？</li><li>节流函数的作用是什么？有哪些应用场景？</li><li>如何把嵌套的数组扁平化？</li><li>如何生成一个递增数列的数组？</li><li>如何解析 url 参数?</li><li>JS 闭包会导致内存泄漏吗 ？JS 内存泄漏的场景有哪些？</li><li>小数精度丢失问题如何解决？</li><li>深拷贝和浅拷贝的区别？如何实现深拷贝？</li><li>柯里化函数实现</li><li>手写 Promise（then的链式调用、all、race、finally）</li><li>手写 call、apply、bind</li><li>手写 EventEmitter 事件发布/订阅</li><li>手写模版引擎，并解释其中原理</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md" target="_blank" rel="noopener noreferrer">lydiahallie/javascript-questions - JavaScript 进阶问题列表</a> 👍</li><li><a href="https://github.com/stephentian/33-js-concepts" target="_blank" rel="noopener noreferrer">每个 JavaScript 工程师都应懂的33个概念</a> 👍</li><li><a href="https://juejin.im/post/5dbebbfa51882524c507fddb" target="_blank" rel="noopener noreferrer">(建议精读)原生JS灵魂之问(中)，检验自己是否真的熟悉JavaScript？</a></li></ul>',19)]))}const p=i(r,[["render",n],["__file","js-interview.html.vue"]]),h=JSON.parse('{"path":"/resource/interview/js-interview.html","title":"JavaScript 面试题","lang":"zh-CN","frontmatter":{"title":"JavaScript 面试题","article":false,"description":"关键点 语法： 数据类型、作用域、原型链、继承、事件循环、闭包、this 指向 ES6: 箭头函数、Promise、async/await、Proxy、Set/Map、Symbol、生成器 应用：节流与防抖、深拷贝、跨域、并发控制、尾递归优化 打包构建：模块化、Webpack、babel、rollup、vite 性能优化：首屏速度、大数据渲染、懒加载、...","head":[["meta",{"property":"og:url","content":"https://huguangju.cn/resource/interview/js-interview.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"JavaScript 面试题"}],["meta",{"property":"og:description","content":"关键点 语法： 数据类型、作用域、原型链、继承、事件循环、闭包、this 指向 ES6: 箭头函数、Promise、async/await、Proxy、Set/Map、Symbol、生成器 应用：节流与防抖、深拷贝、跨域、并发控制、尾递归优化 打包构建：模块化、Webpack、babel、rollup、vite 性能优化：首屏速度、大数据渲染、懒加载、..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T05:33:38.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-21T05:33:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"JavaScript 面试题\\",\\"description\\":\\"关键点 语法： 数据类型、作用域、原型链、继承、事件循环、闭包、this 指向 ES6: 箭头函数、Promise、async/await、Proxy、Set/Map、Symbol、生成器 应用：节流与防抖、深拷贝、跨域、并发控制、尾递归优化 打包构建：模块化、Webpack、babel、rollup、vite 性能优化：首屏速度、大数据渲染、懒加载、...\\"}"]]},"headers":[{"level":2,"title":"关键点","slug":"关键点","link":"#关键点","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[{"level":3,"title":"变量和类型","slug":"变量和类型","link":"#变量和类型","children":[]},{"level":3,"title":"原型和原型链","slug":"原型和原型链","link":"#原型和原型链","children":[]},{"level":3,"title":"作用域和闭包","slug":"作用域和闭包","link":"#作用域和闭包","children":[]},{"level":3,"title":"执行机制","slug":"执行机制","link":"#执行机制","children":[]},{"level":3,"title":"语法和API","slug":"语法和api","link":"#语法和api","children":[]},{"level":3,"title":"Web API","slug":"web-api","link":"#web-api","children":[]},{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1732167218000,"updatedTime":1732167218000,"contributors":[{"name":"huguangju","email":"huguangjugit@163.com","commits":1}]},"readingTime":{"minutes":2.64,"words":793},"filePathRelative":"resource/interview/js-interview.md","localizedDate":"2024年11月21日","excerpt":"<h2>关键点</h2>\\n<ul>\\n<li>语法：\\n<ul>\\n<li>数据类型、作用域、原型链、继承、事件循环、闭包、this 指向</li>\\n<li>ES6: 箭头函数、Promise、async/await、Proxy、Set/Map、Symbol、生成器</li>\\n</ul>\\n</li>\\n<li>应用：节流与防抖、深拷贝、跨域、并发控制、尾递归优化</li>\\n<li>打包构建：模块化、Webpack、babel、rollup、vite</li>\\n<li>性能优化：首屏速度、大数据渲染、懒加载、代码优化、构建优化</li>\\n</ul>\\n<h2>面试题</h2>\\n<h3>变量和类型</h3>","autoDesc":true}');export{p as comp,h as data};
