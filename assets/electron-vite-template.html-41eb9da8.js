import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,C as l}from"./framework-5f3abea5.js";const i={},u={href:"https://github.com/umbrella22/electron-vite-template",target:"_blank",rel:"noopener noreferrer"},r=e(`<h2 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h2><p>配置 npm 及 electron 镜像，避免下载依赖因网络问题失败。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npmmirror.com/
<span class="token comment"># electron</span>
<span class="token assign-left variable">ELECTRON_MIRROR</span><span class="token operator">=</span>https://cdn.npmmirror.com/binaries/electron/
<span class="token assign-left variable">ELECTRON_BUILDER_BINARIES_MIRROR</span><span class="token operator">=</span>https://npmmirror.com/mirrors/electron-builder-binaries/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>首次执行 <code>yarn</code>安装依赖时，执行到 electron 的 node install.js 报 RequestError: socket hang up 并退出。再次执行 <code>yarn</code>就好了。</p></blockquote><p>执行 <code>yarn dev</code>启动项目，带 HMR。</p><h2 id="开发构建" tabindex="-1"><a class="header-anchor" href="#开发构建" aria-hidden="true">#</a> 开发构建</h2><p><code>yarn dev</code> 执行的入口文件为 <code>.electron-vite/dev-runner.ts</code>，用于开发环境代码构建。<br>此文件在 <code>init</code> 函数中主依次启动渲染进程、主进程、Electron。</p>`,7),k={href:"https://www.npmjs.com/package/cfonts",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"electron-vite",-1),v=n("h3",{id:"渲染进程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#渲染进程","aria-hidden":"true"},"#"),s(" 渲染进程")],-1),m=n("blockquote",null,[n("p",null,"Electron 的渲染进程是指在 Electron 应用程序中运行的 JavaScript 代码，它们负责渲染和处理用户界面。每个 Electron 窗口都有一个对应的渲染进程，这个渲染进程负责显示窗口中的内容和处理用户输入。渲染进程可以与主进程进行通信，以便实现更复杂的功能。")],-1),b=n("p",null,"此项目中渲染进程的交由 Vite 处理，用于快速搭建 Web 应用程序的开发环境，并提供快速的热更新和构建功能，以提高开发效率和构建速度。",-1),h=n("h4",{id:"本地开发服务器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#本地开发服务器","aria-hidden":"true"},"#"),s(" 本地开发服务器")],-1),g={href:"https://www.npmjs.com/package/portfinder",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,[s("p"),n("wbr"),s("rocess.env.PORT")],-1),w=n("br",null,null,-1),q=n("code",null,"createServer",-1),_=n("code",null,"vite.config.ts",-1),y=n("br",null,null,-1),x=n("code",null,"server.listen",-1),E=e(`<h4 id="vite-配置" tabindex="-1"><a class="header-anchor" href="#vite-配置" aria-hidden="true">#</a> Vite 配置</h4><p>本地开发服务器由 Vite 创建，其配置文件位于<code>.electron-vite/vite.config.ts</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">,</span> <span class="token comment">// 运行模式</span>
  root<span class="token punctuation">,</span> <span class="token comment">// 指定项目的根目录路径，此处设置为针对渲染进程的 src/renderer</span>
  define<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存储一些全局配置信息</span>
    <span class="token comment">// 渲染进程中约定以 \`__CONFIG__\` （全局变量）来获取 \`env\` 文件夹内的内容</span>
    __CONFIG__<span class="token operator">:</span> config<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置别名，使用 @renderer 来代替 src/renderer</span>
    alias<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;@renderer&quot;</span><span class="token operator">:</span> root<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  base<span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 项目的基础 URL，用于处理静态资源的路径问题</span>
  <span class="token comment">// 构建相关的配置选项，例如输出目录、目标环境、代码压缩等</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    outDir<span class="token operator">:</span>
      config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>target
        <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;dist/web&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;dist/electron/renderer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    emptyOutDir<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    target<span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
    minify<span class="token operator">:</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">,</span>
    cssCodeSplit<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  server<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 分别支持 Vue.js 的 JSX 语法和编译 Vue 单文件组件</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vuePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  optimizeDeps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件中的一些配置选项的含义：</p><ul><li><code>mode</code>：指定当前的运行模式，可以是 &quot;development&quot; 或 &quot;production&quot;。</li><li><code>root</code>：指定项目的根目录路径。</li><li><code>define</code>：定义一些全局变量，这些变量可以在代码中直接使用。</li><li><code>resolve</code>：指定模块解析的配置选项。</li><li><code>base</code>：指定项目的基础 URL，用于处理静态资源的路径问题。</li><li><code>build</code>：指定构建相关的配置选项，例如输出目录、目标环境、代码压缩等。</li><li><code>server</code>：指定开发服务器的配置选项，例如端口号、代理等。</li><li><code>plugins</code>：指定使用的插件，例如 vueJsx 和 vuePlugin。</li><li><code>optimizeDeps</code>：指定 Vite 在开发环境下优化依赖的行为。</li></ul><h3 id="主进程" tabindex="-1"><a class="header-anchor" href="#主进程" aria-hidden="true">#</a> 主进程</h3><blockquote><p>Electron 的主进程是应用程序的核心，负责管理和协调应用程序的所有窗口和渲染进程，同时提供了访问本地文件系统和操作系统资源的能力。</p></blockquote><h4 id="监听文件变化" tabindex="-1"><a class="header-anchor" href="#监听文件变化" aria-hidden="true">#</a> 监听文件变化</h4><p>主进程启动入口为 <code>startMain</code> 函数，返回 Promise 函数。该函数会启动 Electron 主进程并监听主进程文件的变化。当主进程文件发生变化时，会输出日志信息；当主进程文件被修改后重启 Electron 进程时，杀掉当前运行的 Electron 进程，再启动一个新的 Electron 进程。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 监视对主进程代码所做的更改，并在检测到更改时自动重新构建该代码</span>
  <span class="token keyword">const</span> MainWatcher <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>mainOpt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 监听文件变更</span>
  MainWatcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 主进程 src/main 下代码变更时，输出变更的文件名日志信息</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 处理文件监视器发出的所有其他事件</span>
  MainWatcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检测到更改后完成重建代码时</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;END&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 确保 electron 进程对象已存在</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>electronProcess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 用于防止快速连续多次重启 Electron 进程，这可能会导致应用出现问题。</span>
        <span class="token comment">// 默认情况下，该标志设置为false，因此在检测到文件更改事件时将自动重新启动 Electron 进程。</span>
        manualRestart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// 确保在重新启动之前正确终止 Electron 进程，避免同时运行多个实例的 Electron 进程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>electronProcess<span class="token punctuation">.</span>pid<span class="token punctuation">)</span> process<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span>electronProcess<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        electronProcess <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">startElectron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 当 manualRestart 标志被设置为 true 时，它会阻止 Electron 进程在检测到文件更改事件时自动重启。</span>
        <span class="token comment">// 通过设置超时并在超时后将 manualRestart 标志重置为false，以确保不会无限期地将该标志设为 true。</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          manualRestart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重新构建过程中发生错误时</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup" aria-hidden="true">#</a> Rollup</h4><p>主进程代码基于 rollup 构建，其配置文件为<code>.electron-vite/rollup.config.ts</code>，其主要内容如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取 env 目录下的 *.env 文件</span>

<span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ... 省略部分配置</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      preventAssignment<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不要将替换的结果包裹在一个赋值语句中，而是直接替换掉变量名</span>
      <span class="token string-property property">&quot;p<wbr>rocess.env.userConfig&quot;</span><span class="token operator">:</span> config <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 提供路径和读取别名</span>
    <span class="token function">nodeResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      preferBuiltins<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 优先使用Node.js内置模块</span>
      browser<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 将模块的导入路径视为在Node.js环境下运行</span>
      extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.mjs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.node&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 可以解析的模块文件扩展名</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      sourceMap<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不生成源映射文件</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 用于将 JSON 文件转换为 ES6 模块</span>
    <span class="token comment">// 使用 esbuild 进行代码转换和压缩（所有配置项可选）</span>
    <span class="token function">esbuild</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.[jt]s?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// default。转换 .js 或 .ts 结尾的文件</span>
      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token comment">// watch: process.argv.includes(&#39;--watch&#39;), // rollup 中有配置</span>
      sourceMap<span class="token operator">:</span> env <span class="token operator">!=</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> <span class="token comment">// default。非生产环境下生成 sourceMap</span>
      minify<span class="token operator">:</span> env <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生产环境下压缩代码</span>
      target<span class="token operator">:</span> <span class="token string">&quot;es2017&quot;</span><span class="token punctuation">,</span> <span class="token comment">// default。转换后的代码目标版本</span>
      <span class="token comment">// 类似 @rollup/plugin-replace，可在代码中进行常量替换</span>
      define<span class="token operator">:</span> <span class="token punctuation">{</span>
        __VERSION__<span class="token operator">:</span> <span class="token string">&#39;&quot;x.y.z&quot;&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 添加额外的加载器</span>
      loaders<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加对 .json 文件的支持，需要使用 @rollup/plugin-commonjs 插件来将其转换为 ES6 模块</span>
        <span class="token string-property property">&quot;.json&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 在 .js 文件中启用 JSX 语法支持</span>
        <span class="token string-property property">&quot;.js&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jsx&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 创建别名</span>
    <span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      entries<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          find<span class="token operator">:</span> <span class="token string">&quot;@main&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 要替换的模块名</span>
          replacement<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../src/main&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 要替换成的路径</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          find<span class="token operator">:</span> <span class="token string">&quot;@config&quot;</span><span class="token punctuation">,</span>
          replacement<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 生产环境下用 obfuscator 混淆代码，从而增加代码的安全性</span>
    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">==</span> <span class="token string">&quot;production&quot;</span>
    <span class="token operator">?</span> <span class="token function">obfuscator</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      global<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 混淆整个代码库，包括所有导出的变量和函数</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定哪些模块应该被视为外部依赖，而不是被打包进最终的输出文件中</span>
  <span class="token comment">// builtinModules 自 module 模块引入，是一个数组，包含Node.js中内置的所有内置模块的名称</span>
  external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>builtinModules<span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;electron&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用到的 rollup 插件：</p>`,14),R={href:"https://github.com/rollup/plugins/tree/master/packages/node-resolve",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/rollup/plugins/tree/master/packages/commonjs",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/rollup/plugins/tree/master/packages/replace",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/rollup/plugins/tree/master/packages/alias",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/rollup/plugins/tree/master/packages/json",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/egoist/rollup-plugin-esbuild",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/javascript-obfuscator/rollup-plugin-obfuscator",target:"_blank",rel:"noopener noreferrer"},N=e(`<h3 id="electron-进程" tabindex="-1"><a class="header-anchor" href="#electron-进程" aria-hidden="true">#</a> Electron 进程</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">startElectron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// --inspect=5858 参数表示启用调试模式，并监听 5858 端口</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;--inspect=5858&quot;</span><span class="token punctuation">,</span>
    <span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../dist/electron/main/main.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
  <span class="token comment">// spawn 方法返回一个 ChildProcess 对象，并在下方监听 Electron 进程的标准输出和标准错误输出</span>
  electronProcess <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>electron <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  electronProcess<span class="token operator">?.</span>stdout<span class="token operator">?.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">electronLog</span><span class="token punctuation">(</span><span class="token function">removeJunk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  electronProcess<span class="token operator">?.</span>stderr<span class="token operator">?.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// removeJunk 过滤 Electron 进程输出中的无用信息，过滤指定格式的警告、错误、日志信息</span>
    <span class="token function">electronLog</span><span class="token punctuation">(</span><span class="token function">removeJunk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 处理 Electron 进程关闭事件</span>
  electronProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当 Electron 进程关闭时，检查 manualRestart 标志为 false 时调用 process.exit() 终止 Node.js 进程。</span>
    <span class="token comment">// 确保在 Electron 进程关闭时终止 Node.js 进程，除非手动启动了重启操作。</span>
    <span class="token comment">// 可以确保应用程序在 Electron 进程关闭时完全关闭，并防止任何残留进程或资源对应用程序造成问题。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>manualRestart<span class="token punctuation">)</span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>p<wbr>rocess.env.npm_execpath: 确定应用程序是使用 npm 还是 yarn 运行。npm_execpath 属性由 npm 设置，并包含当前正在运行的 npm 可执行文件路径。</p></blockquote><h3 id="其它依赖" tabindex="-1"><a class="header-anchor" href="#其它依赖" aria-hidden="true">#</a> 其它依赖</h3>`,4),V={href:"https://www.npmjs.com/package/dotenv",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/chalk/chalk",target:"_blank",rel:"noopener noreferrer"},L=e(`<h2 id="主进程-1" tabindex="-1"><a class="header-anchor" href="#主进程-1" aria-hidden="true">#</a> 主进程</h2><p>主进程入口文件在 <code>src/main/index.ts</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ...</span>
<span class="token keyword">function</span> <span class="token function">onAppReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化窗口</span>
  <span class="token keyword">new</span> <span class="token class-name">InitWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 禁用 F12 按钮</span>
  DisableButton<span class="token punctuation">.</span><span class="token function">Disablef12</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 开发环境加载 Vue.js 开发工具扩展</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">VUEJS3_DEVTOOLS</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;electron-devtools-vendor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session<span class="token punctuation">.</span>defaultSession<span class="token punctuation">.</span><span class="token function">loadExtension</span><span class="token punctuation">(</span><span class="token constant">VUEJS3_DEVTOOLS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      allowFileAccess<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;已安装: vue-devtools&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 应用准备就绪时</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onAppReady<span class="token punctuation">)</span>
<span class="token comment">// 由于9.x版本问题，需要加入该配置关闭跨域问题</span>
app<span class="token punctuation">.</span>commandLine<span class="token punctuation">.</span><span class="token function">appendSwitch</span><span class="token punctuation">(</span><span class="token string">&#39;disable-features&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OutOfBlinkCors&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 当所有窗口关闭时退出应用</span>
app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;window-all-closed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 新窗口创建</span>
app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;browser-window-created&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window-created&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 如果是当前进程是默认应用，则删除“electron-vue-template”协议的默认客户端</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>defaultApp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">removeAsDefaultProtocolClient</span><span class="token punctuation">(</span><span class="token string">&#39;electron-vue-template&#39;</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;由于框架特殊性开发环境下无法使用&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">setAsDefaultProtocolClient</span><span class="token punctuation">(</span><span class="token string">&#39;electron-vue-template&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化窗口" tabindex="-1"><a class="header-anchor" href="#初始化窗口" aria-hidden="true">#</a> 初始化窗口</h3><p>上面代码中的 <code>new InitWindow().initWindow()</code>用于初始化窗口设置，源码位于 <code>src/main/services/windowManager.ts</code>，用于初始化 Electron 应用程序的主进程。它创建了一个 <code>MainInit</code> 类，该类负责创建应用程序的主窗口和加载窗口（主窗口加载完成前显示），并在必要时处理窗口的崩溃和无响应情况。同时，还设置了窗口菜单和 IPC 通信。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MainInit</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> winURL<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> shartURL<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> loadWindow<span class="token operator">:</span> BrowserWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> mainWindow<span class="token operator">:</span> BrowserWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>winURL <span class="token operator">=</span> winURL<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shartURL <span class="token operator">=</span> loadingURL<span class="token punctuation">;</span>
    <span class="token comment">// 开发环境添加“开发者设置”菜单</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 进程间通讯</span>
    setIpc<span class="token punctuation">.</span><span class="token function">Mainfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 初始化窗口函数（若配置显示loading窗口，在主窗口加载前先显示）</span>
  <span class="token function">initWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>UseStartupChart<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadingWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shartURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 主窗口函数</span>
  <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 窗口标题栏样式（hidden 为隐藏标题栏）</span>
      titleBarStyle<span class="token operator">:</span> IsUseSysTitle <span class="token operator">?</span> <span class="token string">&quot;default&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;hidden&quot;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>mainWindowConfig<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置菜单</span>
    <span class="token keyword">const</span> menu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>menuconfig <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加载主窗口</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>winURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;ready-to-show&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在此事件后显示窗口将没有视觉闪烁！！</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 开发模式下自动开启devtools</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mode<span class="token operator">:</span> <span class="token string">&quot;undocked&quot;</span><span class="token punctuation">,</span> activate<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 销毁loading窗口</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>UseStartupChart<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadWindow<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 主窗口未响应时提示，让用户选择重载或退出</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;unresponsive&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在窗口关闭时移除相应窗口的引用对象，避免再次使用它</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;closed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 当确定渲染进程卡死时，分类型进行告警操作，并让用户选择重载或退出</span>
    app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;render-process-gone&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> webContents<span class="token punctuation">,</span> details<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进程崩溃或被杀死时警告，让用户选择重载或退出</span>
    app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;child-process-gone&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> details<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 加载窗口函数</span>
  <span class="token function">loadingWindow</span><span class="token punctuation">(</span>loadingURL<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
      height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
      frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 创建一个无边框窗口 </span>
      skipTaskbar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 在任务栏中显示窗口</span>
      transparent<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使窗口 透明</span>
      resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span> experimentalFeatures<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 启用 Chromium 的实验功能</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>loadWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>loadingURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadWindow<span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 延迟两秒可以根据情况后续调快，= =，就相当于个，sleep吧，就那种。 = =。。。</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进程通信-ipc" tabindex="-1"><a class="header-anchor" href="#进程通信-ipc" aria-hidden="true">#</a> 进程通信（IPC）</h3><p>上方代码中的 <code>setIpc.Mainfunc()</code>从同目录下的 <code>ipcMain.ts</code>引入。设置了几个 IPC处理函数，用于在 Electron 应用程序的主进程和渲染器进程之间进行通信。包括：</p><ul><li><code>IsUseSysTitle</code>：返回一个布尔值，指示应用程序是否应该使用系统标题栏</li><li><code>windows-mini</code>：最小化发送消息的窗口</li><li><code>window-max</code>：最大化或还原发送消息的窗口</li><li><code>window-close</code>：关闭发送消息的窗口</li><li><code>check-update</code>：检查更新并显示对话框（如果有可用更新）</li><li><code>confirm-update</code>：退出并安装更新</li><li><code>app-close</code>：退出Electron应用程序</li><li><code>get-static-path</code>: 返回带有各种静态文件路径的对象，这些文件由应用程序使用</li><li><code>open-messagebox</code>: 显示具有自定义选项的消息框</li><li><code>open-errorbox</code>: 显示具有标题和消息的错误框</li><li><code>start-server</code>: 启动本地服务器并返回其状态</li><li><code>stop-server</code>: 停止本地服务器并返回其状态</li></ul><blockquote><p><code>ipcMain.handle(channel, listener)</code> 用于为一个 invokeable 的 IPC 添加一个 handler。每当一个渲染进程调用 <code>ipcRenderer.invoke(channel, ...args)</code> 时这个处理器就会被调用。</p></blockquote><h4 id="检查更新" tabindex="-1"><a class="header-anchor" href="#检查更新" aria-hidden="true">#</a> 检查更新</h4><p>在上方的 <code>check-update</code>中处理检查更新，代码位于 <code>src/main/services/checkupdate.ts</code>，该类为 <code>electron-updater</code> 包提供的 <code>autoUpdater</code> 模块设置事件监听器，包括：</p><ul><li><code>error</code>：在更新过程中发生错误时触发</li><li><code>checking-for-update</code>：当更新过程开始时触发</li><li><code>update-available</code>：当有新版本可用时触发</li><li><code>update-not-available</code>：当没有新版本可用时触发</li><li><code>download-progress</code>：在下载更新时触发</li><li><code>update-downloaded</code>：在下载完成后触发</li></ul><p>还有三个方法：</p><ul><li><code>Message</code>: 向主窗口的渲染进程发送消息</li><li><code>checkUpdate</code>: 检查是否有更新，并根据更新状态向渲染进程发送消息</li><li><code>quitAndInstall</code>: 退出应用程序并安装更新</li></ul>`,15),U={href:"https://github.com/electron-userland/electron-builder/blob/master/packages/electron-updater/README.md",target:"_blank",rel:"noopener noreferrer"},P=e(`<h4 id="热更新" tabindex="-1"><a class="header-anchor" href="#热更新" aria-hidden="true">#</a> 热更新</h4><p><code>ipcMain.handle</code> 函数监听来自渲染进程的 <code>hot-update</code> 事件，并使用与事件发送方相关联的 <code>BrowserWindow</code> 对象调用 <code>updater</code> 函数。<br><code>updater</code> 函数首先通过向远程服务器发出请求来检查是否有新版本可用。如果有，它会下载更新包，使用 <code>SHA256</code> 哈希验证其完整性，将其提取到临时目录中，删除旧应用程序文件，并将新文件复制到应用程序目录中。</p><h2 id="渲染进程-1" tabindex="-1"><a class="header-anchor" href="#渲染进程-1" aria-hidden="true">#</a> 渲染进程</h2><p>渲染进程负责呈现用户界面。此项目采用 Vue3 + Vite 开发，<code>src/renderer</code> 下即为整个 用户界面代码，结构跟传统 Web 应用一致。<code>index.html</code>作用入口，会被 <code>BrowserWindow</code>实例通过 <code>loadURL</code> 加载。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="使用-icon-park-自定义项目图标" tabindex="-1"><a class="header-anchor" href="#使用-icon-park-自定义项目图标" aria-hidden="true">#</a> 使用 icon-park 自定义项目图标</h3><p>使用 <code>&lt;icon-pack&gt;</code> 组件引入图标，控制台报 <code>[Vue warn]: Failed to resolve component: iconpark-icon If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement. </code><br>解决方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fix: Failed to resolve component: iconpark-icon</span>
<span class="token keyword">const</span> <span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tag <span class="token operator">===</span> <span class="token string">&quot;iconpark-icon&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      isCustomElement<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">vuePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          isCustomElement<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function D(B,J){const a=l("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("p",null,[n("a",u,[s("GitHub - umbrella22/electron-vite-template"),t(a)]),s(" - vue3 + Vite + electron项目模板")])]),r,n("blockquote",null,[n("p",null,[s("最开始，使用 "),n("a",k,[s("cfonts"),t(a)]),s(" 在终端中显示彩色的 ASCII 艺术字体 "),d,s("。")])]),v,m,b,h,n("p",null,[s("先使用 "),n("a",g,[s("portfinder"),t(a)]),s(" 获取一个可用的端口号，并将该端口号设置为 "),f,s(" 的值。"),w,s("然后，它调用 Vite 的"),q,s(" 函数创建一个 Vite 服务器，并将 "),_,s(" 文件作为配置文件传递给该函数。"),y,s("最后，使用 "),x,s(" 方法启动服务器（使用上面获取的端口号）。")]),E,n("ul",null,[n("li",null,[n("a",R,[s("@rollup/plugin-node-resolve"),t(a)]),s(": 用于解析 node_modules 中的第三方模块")]),n("li",null,[n("a",j,[s("@rollup/plugin-commonjs"),t(a)]),s(": 用于将 CommonJS 模块转换为 ES6 模块")]),n("li",null,[n("a",W,[s("@rollup/plugin-replace"),t(a)]),s(": 用于在打包过程中替换代码中的字符串或者其他值")]),n("li",null,[n("a",C,[s("@rollup/plugin-alias"),t(a)]),s(": 用于创建模块的别名")]),n("li",null,[n("a",S,[s("@rollup/plugin-json"),t(a)]),s(": 用于将 JSON 文件转换为 ES6 模块")]),n("li",null,[n("a",M,[s("rollup-plugin-esbuild"),t(a)]),s(": 用于使用 esbuild 进行代码转换和压缩，以提高打包速度和减小文件大小")]),n("li",null,[n("a",O,[s("rollup-plugin-obfuscator"),t(a)]),s(": 用于对打包后的代码进行混淆和压缩，以保护代码的安全性")])]),N,n("ul",null,[n("li",null,[n("a",V,[s("dotenv"),t(a)]),s(" 可用于加载环境变量")]),n("li",null,[n("a",I,[s("chalk"),t(a)]),s(" 在终端中输出彩色文字")])]),L,n("blockquote",null,[n("p",null,[n("a",U,[s("electron-updater"),t(a)]),s(" 是一个 Electron 应用程序自动更新的库，可以方便地实现应用程序的自动更新功能，提高用户体验和开发效率。它支持多种更新方式，并提供了许多可配置的选项，可以自定义更新的行为和外观。")])]),P])}const A=p(i,[["render",D],["__file","electron-vite-template.html.vue"]]);export{A as default};
