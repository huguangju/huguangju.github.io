const e=JSON.parse(`{"key":"v-006b9c1a","path":"/code/basic/fed-cache-and-tec-solutions2.html","title":"前端缓存与技术方案（下）","lang":"zh-CN","frontmatter":{"title":"前端缓存与技术方案（下）","date":"2023-02-17T00:00:00.000Z","category":["基础"],"tag":["缓存"],"description":"HTTP 缓存方案 前端应用中的 HTTP 缓存方案 当访问单页应用（SPA）的首页时，浏览器率先加载的是 HTML 文件，后续再按需加载其它公共资源。刷新页面，可观察 HTML 资源是走的协商缓存，其它大部分资源都命中了强缓存。 因为像 JS、CSS 等资源经过像 webpack 这样的打包工具打包后可以自动生成 hash 文件名，资源变化会导致 hash 名更新。而 HTML 的文件名不会改变。 但我们期望浏览器每次加载时都应该向服务器询问是否更新。否则会出现新版本发布后，浏览器读取缓存 HTML 文件，会导致页面空白报错（旧资源被删除）或应用没有更新（读取了旧资源）的问题。","head":[["meta",{"property":"og:url","content":"https://huguangju.cn/code/basic/fed-cache-and-tec-solutions2.html"}],["meta",{"property":"og:site_name","content":"Carson's blog"}],["meta",{"property":"og:title","content":"前端缓存与技术方案（下）"}],["meta",{"property":"og:description","content":"HTTP 缓存方案 前端应用中的 HTTP 缓存方案 当访问单页应用（SPA）的首页时，浏览器率先加载的是 HTML 文件，后续再按需加载其它公共资源。刷新页面，可观察 HTML 资源是走的协商缓存，其它大部分资源都命中了强缓存。 因为像 JS、CSS 等资源经过像 webpack 这样的打包工具打包后可以自动生成 hash 文件名，资源变化会导致 hash 名更新。而 HTML 的文件名不会改变。 但我们期望浏览器每次加载时都应该向服务器询问是否更新。否则会出现新版本发布后，浏览器读取缓存 HTML 文件，会导致页面空白报错（旧资源被删除）或应用没有更新（读取了旧资源）的问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-05T14:01:34.000Z"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:published_time","content":"2023-02-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-05T14:01:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端缓存与技术方案（下）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-05T14:01:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"HTTP 缓存方案","slug":"http-缓存方案","link":"#http-缓存方案","children":[{"level":3,"title":"前端应用中的 HTTP 缓存方案","slug":"前端应用中的-http-缓存方案","link":"#前端应用中的-http-缓存方案","children":[]},{"level":3,"title":"Webpack 中的 Hash 模式","slug":"webpack-中的-hash-模式","link":"#webpack-中的-hash-模式","children":[]}]},{"level":2,"title":"用户操作与 HTTP 缓存","slug":"用户操作与-http-缓存","link":"#用户操作与-http-缓存","children":[{"level":3,"title":"Chrome 的三种加载模式","slug":"chrome-的三种加载模式","link":"#chrome-的三种加载模式","children":[]}]},{"level":2,"title":"Nginx 与跨域问题","slug":"nginx-与跨域问题","link":"#nginx-与跨域问题","children":[{"level":3,"title":"使用 Nginx 配置响应报头","slug":"使用-nginx-配置响应报头","link":"#使用-nginx-配置响应报头","children":[]}]},{"level":2,"title":"Memory Cache 与 Disk Cache","slug":"memory-cache-与-disk-cache","link":"#memory-cache-与-disk-cache","children":[{"level":3,"title":"Memory Cache","slug":"memory-cache","link":"#memory-cache","children":[]},{"level":3,"title":"Disk Cache","slug":"disk-cache","link":"#disk-cache","children":[]}]},{"level":2,"title":"浏览器缓存机制","slug":"浏览器缓存机制","link":"#浏览器缓存机制","children":[{"level":3,"title":"缓存获取顺序","slug":"缓存获取顺序","link":"#缓存获取顺序","children":[]},{"level":3,"title":"缓存存储优先级","slug":"缓存存储优先级","link":"#缓存存储优先级","children":[]},{"level":3,"title":"Preload 与 Prefetch","slug":"preload-与-prefetch","link":"#preload-与-prefetch","children":[]}]},{"level":2,"title":"Service Worker","slug":"service-worker","link":"#service-worker","children":[{"level":3,"title":"PWA","slug":"pwa","link":"#pwa","children":[]},{"level":3,"title":"Service Worker 介绍","slug":"service-worker-介绍","link":"#service-worker-介绍","children":[]}]},{"level":2,"title":"存储型缓存","slug":"存储型缓存","link":"#存储型缓存","children":[{"level":3,"title":"网站登录背后的存储逻辑","slug":"网站登录背后的存储逻辑","link":"#网站登录背后的存储逻辑","children":[]},{"level":3,"title":"浏览器存储型缓存方案","slug":"浏览器存储型缓存方案","link":"#浏览器存储型缓存方案","children":[]}]},{"level":2,"title":"Chrome 浏览器 Application 面板","slug":"chrome-浏览器-application-面板","link":"#chrome-浏览器-application-面板","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1680696631000,"updatedTime":1680703294000,"contributors":[{"name":"huguangju","email":"huguangju@weli.cn","commits":2}]},"readingTime":{"minutes":20.32,"words":6096},"filePathRelative":"code/basic/fed-cache-and-tec-solutions2.md","localizedDate":"2023年2月17日","excerpt":"<h2> HTTP 缓存方案</h2>\\n<h3> 前端应用中的 HTTP 缓存方案</h3>\\n<p>当访问单页应用（SPA）的首页时，浏览器率先加载的是 HTML 文件，后续再按需加载其它公共资源。刷新页面，可观察 HTML 资源是走的协商缓存，其它大部分资源都命中了强缓存。</p>\\n<p>因为像 JS、CSS 等资源经过像 webpack 这样的打包工具打包后可以自动生成 hash 文件名，资源变化会导致 hash 名更新。而 HTML 的文件名不会改变。</p>\\n<p>但我们期望浏览器每次加载时都应该向服务器询问是否更新。否则会出现新版本发布后，浏览器读取缓存 HTML 文件，会导致页面空白报错（旧资源被删除）或应用没有更新（读取了旧资源）的问题。</p>\\n","autoDesc":true}`);export{e as data};
