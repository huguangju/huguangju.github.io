import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-CmPTslM6.js";const e={};function l(p,i){return n(),t("div",null,i[0]||(i[0]=[a(`<p>TypeScript 能让代码更好地弹性伸缩，它开发的程序更安全（类型安全）。</p><blockquote><p>类型安全：借助类型避免程序做无效的事情。</p></blockquote><p>TypeScript 除了消除与类型有关的一整类问题之外，还彻底改变了编写代码的方式，先在类型层面规划整个程序，再深入到值层面。 在设计过程中考虑边缘情况，使程序更简单、运行更快，且更易于理解和维护。</p><h2 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h2><p>程序由一些文件构成，并由编译器解析，转换成抽象句法树（abstract syntax tree，AST）。编译器把 AST 转换成一种称为字节码（bytecode）的低层表示。</p><blockquote><p>AST 是去掉了空白、注释和缩进用的制表符或空格之后的数据结构。</p></blockquote><p>运行程序：就是让运行时计算由编译器从源码解析得来的 AST 生成的字节码。步骤如下：</p><ol><li>把程序解析为 AST</li><li>把 AST 编译成字节码</li><li>运行时计算字节码</li></ol><p>TypeScript 特殊之处：不直接编译成字节码，而是编译成 JavaScript 代码。</p><div class="hint-container info"><p class="hint-container-title">TypeScript 是如何让代码更安全呢？</p><p>TypeScript 编译器生成 AST 之后，真正运行代码前，会对代码做<strong>类型检查</strong>。</p><blockquote><p><strong>类型检查器</strong>：检查代码是否符合<strong>类型安全要求</strong>的特殊程序。</p></blockquote></div><p>使用 TypeScript，会在原来的编译流程上前置以下流程：</p><ol><li>TypeScript 源码 -&gt; TypeScript AST</li><li>类型检查器检查 AST</li><li>TypeScript AST -&gt; JavaScript 源码</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>程序中的类型对程序生成的输出没有任何影响，类型只在类型检查（第 2 步）这一步使用。意味着，可以随时更新类型，而不会破坏应用功能。</p></div><h2 id="类型系统" tabindex="-1"><a class="header-anchor" href="#类型系统"><span>类型系统</span></a></h2><blockquote><p>类型系统：类型检查器为程序<strong>分配类型</strong>时使用的一系列<strong>规则</strong>。</p></blockquote><p>类型系统有两种：</p><ol><li>显式注解（形式：<code>value: type</code>，仅在必要时使用）</li><li>自动推导（推荐）</li></ol><h3 id="typescript-vs-javascript" tabindex="-1"><a class="header-anchor" href="#typescript-vs-javascript"><span>TypeScript VS. JavaScript</span></a></h3><table><thead><tr><th>类型系统特性</th><th>JavaScript</th><th>TypeScript</th></tr></thead><tbody><tr><td>类型是如何绑定的？</td><td>动态</td><td>静态</td></tr><tr><td>是否自动转换类型</td><td>是</td><td>否（多数时候）</td></tr><tr><td>何时检查类型？</td><td>运行时</td><td>编译时</td></tr><tr><td>何时报告错误</td><td>运行时</td><td>编译时（多数时候）</td></tr></tbody></table><p>JavaScript 是<strong>动态绑定</strong>的，在程序运行时才知道类型。</p><p>TypeScript 是<strong>渐进式类型语言</strong>，在编译时可以知道类型（即使没有类型，也能部分推导）。</p><p>JavaScript 是<strong>弱类型语言</strong>，执行无效操作也会进行<strong>隐式转换</strong>。</p><p>TypeScript 会在<strong>编译时</strong>对代码做类型检查，会对代码做<strong>静态分析</strong>。如时输入代码有错，会在编辑器内输入代码时显示，极大缩短了反馈时间。</p><h2 id="代码编辑器设置" tabindex="-1"><a class="header-anchor" href="#代码编辑器设置"><span>代码编辑器设置</span></a></h2><p>初始化 TypeScript 项目：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello-ts</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> typescript</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tslint</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @types/node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tsconfg-json" tabindex="-1"><a class="header-anchor" href="#tsconfg-json"><span>tsconfg.json</span></a></h3><p>放在 TypeScript 项目根目录，用于定义要编译的源文件、目标目录、运行时版本等。</p><p>在根目录新建 tsconfig.json 文件（也可通过 <code>tsc --init</code> 生成），写入：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;lib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;es2015&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;module&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;commonjs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;outDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;sourceMap&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;strict&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;es2015&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;include&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;src&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简要介绍一下部分选项的作用：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>include</td><td>指定要编译的文件或目录的路径，支持通配符。默认为 [&quot;**/*&quot;]。</td></tr><tr><td>lib</td><td>指定要包含的库文件的列表。默认为 [&quot;dom&quot;, &quot;es5&quot;, &quot;es2015.promise&quot;]。</td></tr><tr><td>module</td><td>指定要使用的模块系统。可选值为 &quot;CommonJS&quot;、&quot;SystemJs&quot;、&quot;umd&quot;、&quot;ES2015&quot; 等。默认为 &quot;commonjs&quot;。</td></tr><tr><td>outDir</td><td>指定编译输出目录的路径。默认为 &quot;./dist&quot;。</td></tr><tr><td>strict</td><td>开启所有严格类型检查选项。可选值为 true 或 false。默认为 false。</td></tr><tr><td>target</td><td>指定编译后的 JavaScript 代码目标版本。可选值为 &quot;ES3&quot;、&quot;ES5&quot;、&quot;ES2015&quot;、&quot;ES2016&quot; 等。</td></tr></tbody></table><p>这些选项很少改动，偶尔需切换打包工具时修改 module 和 target 设置，需在浏览器中运行时在 lib 中添加 &quot;dom&quot;。</p><p>使用 tsconfig.json 可把配置纳入源码控制。可通过 <code>tsc --help</code> 命令查看更多选项。</p><h3 id="eslint-json" tabindex="-1"><a class="header-anchor" href="#eslint-json"><span>eslint.json</span></a></h3><blockquote><p>原文使用的是 TSLint，其官方维护已于 2019 年停止，会与 ESLint 合并，因此推荐使用 ESLint 代替 TSLint。</p></blockquote><p>生成默认配置的 .eslintrc.js 文件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 根据提示操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> eslint</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>内容如下：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  env</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    browser</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    commonjs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    es2021</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;eslint:recommended&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;plugin:@typescript-eslint/recommended&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  overrides</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  parser</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@typescript-eslint/parser&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  parserOptions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ecmaVersion</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;latest&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@typescript-eslint&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的规则列表参见 <a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">ESLint 文档</a>。</p><h3 id="index-ts" tabindex="-1"><a class="header-anchor" href="#index-ts"><span>index.ts</span></a></h3><p>创建第一个 TypeScript 文件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello-ts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/index.ts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 index.ts 中输入代码：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello TypeScript!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译并运行 TypeScript 代码：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tsc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./dist/index.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台将看到一条日志：Hello TypeScript!</p>`,49)]))}const d=s(e,[["render",l],["__file","introduction.html.vue"]]),k=JSON.parse('{"path":"/reading/programming-typescript/introduction.html","title":"TypeScript 概述","lang":"zh-CN","frontmatter":{"title":"TypeScript 概述","category":["TypeScript"],"tag":["读书笔记"],"description":"TypeScript 能让代码更好地弹性伸缩，它开发的程序更安全（类型安全）。 类型安全：借助类型避免程序做无效的事情。 TypeScript 除了消除与类型有关的一整类问题之外，还彻底改变了编写代码的方式，先在类型层面规划整个程序，再深入到值层面。 在设计过程中考虑边缘情况，使程序更简单、运行更快，且更易于理解和维护。 编译器 程序由一些文件构成，并...","head":[["meta",{"property":"og:url","content":"https://huguangju.cn/reading/programming-typescript/introduction.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"TypeScript 概述"}],["meta",{"property":"og:description","content":"TypeScript 能让代码更好地弹性伸缩，它开发的程序更安全（类型安全）。 类型安全：借助类型避免程序做无效的事情。 TypeScript 除了消除与类型有关的一整类问题之外，还彻底改变了编写代码的方式，先在类型层面规划整个程序，再深入到值层面。 在设计过程中考虑边缘情况，使程序更简单、运行更快，且更易于理解和维护。 编译器 程序由一些文件构成，并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T05:33:38.000Z"}],["meta",{"property":"article:tag","content":"读书笔记"}],["meta",{"property":"article:modified_time","content":"2024-11-21T05:33:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript 概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-21T05:33:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"huguangju\\",\\"url\\":\\"https://huguangju.cn\\"}]}"]]},"headers":[{"level":2,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":2,"title":"类型系统","slug":"类型系统","link":"#类型系统","children":[{"level":3,"title":"TypeScript VS. JavaScript","slug":"typescript-vs-javascript","link":"#typescript-vs-javascript","children":[]}]},{"level":2,"title":"代码编辑器设置","slug":"代码编辑器设置","link":"#代码编辑器设置","children":[{"level":3,"title":"tsconfg.json","slug":"tsconfg-json","link":"#tsconfg-json","children":[]},{"level":3,"title":"eslint.json","slug":"eslint-json","link":"#eslint-json","children":[]},{"level":3,"title":"index.ts","slug":"index-ts","link":"#index-ts","children":[]}]}],"git":{"createdTime":1732167218000,"updatedTime":1732167218000,"contributors":[{"name":"huguangju","email":"huguangjugit@163.com","commits":1}]},"readingTime":{"minutes":3.87,"words":1160},"filePathRelative":"reading/programming-typescript/introduction.md","localizedDate":"2024年11月21日","excerpt":"<p>TypeScript 能让代码更好地弹性伸缩，它开发的程序更安全（类型安全）。</p>\\n<blockquote>\\n<p>类型安全：借助类型避免程序做无效的事情。</p>\\n</blockquote>\\n<p>TypeScript 除了消除与类型有关的一整类问题之外，还彻底改变了编写代码的方式，先在类型层面规划整个程序，再深入到值层面。\\n在设计过程中考虑边缘情况，使程序更简单、运行更快，且更易于理解和维护。</p>\\n<h2>编译器</h2>\\n<p>程序由一些文件构成，并由编译器解析，转换成抽象句法树（abstract syntax tree，AST）。编译器把 AST 转换成一种称为字节码（bytecode）的低层表示。</p>","autoDesc":true}');export{d as comp,k as data};
