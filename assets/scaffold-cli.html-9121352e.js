import{_ as e,W as o,X as c,a1 as i,Y as n,Z as s,$ as t,a0 as p,C as l}from"./framework-5f3abea5.js";const u={},r=p('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>脚手架是工程化中的重要环节，用于新项目的启动和搭建，能帮助开发者提升效率和开发体验。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>脚手架自动生成项目的使用场景非常广泛，特别是在需要频繁创建新项目的情况下。以下是一些常见的使用场景：</p><ol><li><p>新项目启动：当需要启动一个新项目时，可以使用脚手架自动生成项目的基础结构，包括目录结构、配置文件、依赖项等，从而加快项目启动的速度。</p></li><li><p>快速原型开发：快速创建一个原型，从而节省时间和精力。</p></li><li><p>统一项目结构：统一多个项目的结构和规范时，从而确保项目结构和规范的一致性。</p></li><li><p>项目模板定制：为不同的项目创建不同的模板，并根据不同的需求进行定制化，从而提高项目的可维护性和可扩展性。</p></li></ol>',5),k=p('<p>总之，脚手架自动生成项目可以帮助开发人员快速创建项目，并且提高项目的可维护性和可扩展性，特别是在需要频繁创建新项目或者需要统一多个项目的结构和规范时，使用脚手架可以提高开发效率和代码质量。 在前端工程化中，脚手架是不可或缺的一环。</p><p>通常，开发新项目大都是直接复制之前的项目代码，然后删减，这显然不是优雅的方式。因此，需要脚手架<strong>自动生成项目，在项目初始化时就具有统一的技术栈、权限、基础功能、代码规范，以及项目构建流程，甚至单元测试等</strong>。</p><p>更进一步，上述统一化的功能可当做<strong>独立的包发布和维护</strong>，以方便后续在各个项目中<strong>版本升级</strong>。这样新项目开发只需专注于业务，无需过多关项目构建及公共逻辑维护，提高前端研发能效。</p><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><p>现代脚手架离不开命令行工具（CLI），流畅的命令行工具能快速启动脚手架，实现高度自动化和智能化流程。</p><p>为了实现一个简单的命令行工具，用于创建基于模板的项目，我们需要使用以下依赖包：</p>',6),d={href:"https://github.com/terkelg/prompts",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/marvinhagemeister/kolorist",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/tj/commander.js",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>最终，我们的目标是支持以下方式启动项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create hugon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>hugon 是这个项目的名称，需要创建一个 create-hugon 包并发布到 npm 上。</p></blockquote><h3 id="npm-create-命令" tabindex="-1"><a class="header-anchor" href="#npm-create-命令" aria-hidden="true">#</a> npm create  命令</h3><p><code>npm create</code> 是一个用于创建新项目的 npm 命令。它可以自动化地创建一个新的项目，包括一些常见的配置和文件，以及安装一些常用的依赖项。使用 <code>npm create</code>命令可以极大地简化项目的初始化过程。</p><p>要使用 npm create 命令创建一个新项目，只需要在终端中输入 <code>npm create &lt;package-name&gt;</code>，其中 <code>&lt;package-name&gt;</code> 是你想要创建的项目的名称。 npm 会首先检查本地是否已经安装了 <code>create-&lt;package-name&gt;</code> 包。如果没有安装，则会自动从 npm registry 下载该包，并将其安装到本地的 node_modules 目录中。</p>`,6),g={href:"https://docs.npmjs.com/cli/v9/commands/npm-init/",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[s("然后，npm 会执行 "),n("code",null,"create-<package-name>"),s(" 包中的一个名为 "),n("code",null,"bin/create-<package-name>"),s(" 的脚本（定义在 package.json 中），该脚本负责生成新项目的文件和配置(通常会定义一些模板和配置文件，将它们复制到新项目的目录中，并根据用户的选择和输入进行初始化配置)。")],-1),h=n("code",null,"npm create",-1),y={href:"https://docs.npmjs.com/cli/v9/commands/npm-exec",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create foo -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> create-foo
<span class="token function">npm</span> create @usr/foo -<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token builtin class-name">exec</span> @usr/create-foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=p(`<h3 id="启动命令行项目" tabindex="-1"><a class="header-anchor" href="#启动命令行项目" aria-hidden="true">#</a> 启动命令行项目</h3><p>先如下创建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> create-hugon <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> create-hugon
<span class="token function">npm</span> init <span class="token parameter variable">--yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着创建 src 目录及 index.ts 文件，内容如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> minimist <span class="token keyword">from</span> <span class="token string">&#39;minimist&#39;</span>

<span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token generic-function"><span class="token function">minimist</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>
  template<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token builtin">string</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装依赖包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> unbuild kolorist minimist prompts <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">add</span> typescript @types/node <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),x={href:"https://github.com/unjs/unbuild",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"stub",-1),j=p(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;unbuild --stub&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>--stub</code> 选项用于创建一个轻量级的启动脚本，这个启动脚本被称为 <code>stub</code>。它的作用是在运行时加载打包后的代码，并将控制权转交给打包后的代码。通常情况下，<code>stub</code> 会非常小，只包含一些必要的代码，例如加载打包后的代码的逻辑等。</p></blockquote>`,2),S={href:"https://github.com/unjs/jiti",target:"_blank",rel:"noopener noreferrer"},D=p(`<p>为了使 CLI 可以在终端执行，需在 package.json 中指定 bin 文件入口，注册一个名为 create-hugon 的命令。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定文件作为ES模块语法加载</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;create-hugon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>bin</code> 字段用于声明一些可执行文件的路径，通常是一些命令行工具或者脚本。 在终端中输入这些命令时，实际上是在执行对应的可执行文件。操作系统会在环境变量 <code>PATH</code> 中定义的路径中寻找对应的可执行文件并执行。<br><br> 在安装包时，npm 会将 bin 字段中声明的可执行文件链接到全局 node_modules/.bin 目录下。这个目录也会被添加到环境变量 PATH 中，所以可以直接在终端中执行这些命令。<br><br> 在终端中执行 <code>create-hugon</code> 命令，实际上就是在执行 ./bin/create-hugon.js 文件。</p></blockquote><p>先执行 <code>npm run dev</code> ，会在 dist 下生成 index.mjs 文件。然后在 index.js 内引入，作为包的入口文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env node</span>
<span class="token function">import</span> <span class="token string">&#39;./dist/index.mjs&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了调试方便，将当前项目链接到全局环境中（执行<code>npm ls -g</code> 可查看已安装到全局的命令）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>npm link</code> 命令会在全局 node_modules 目录中创建一个指向本地包的符号链接，然后在当前项目的 node_modules 目录中创建一个指向全局包的符号链接，这样就可以在当前项目中使用本地包了。</p></blockquote><p>现在就可以执行 <code>create-hugon</code> 命令了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create-hugon my-hugon-app <span class="token parameter variable">--template</span> admin-ts
<span class="token comment">#&gt; { _: [ &#39;my-hugon-app&#39; ], template: &#39;admin-ts&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析处理命令行输入" tabindex="-1"><a class="header-anchor" href="#解析处理命令行输入" aria-hidden="true">#</a> 解析处理命令行输入</h3><p>上文中，我们创建了一个命令行项目，可以全局执行该命令，并且可以接收用户输入参数。接下来，我们需要解析命令行输入，以编写项目创建逻辑。</p><p>使用 prompts 模块支持用户交互，同时使用 minimist 模块解析命令行参数。在 init 函数中编写参数解析逻辑。需要设计命令行支持的几个选项目：</p><ul><li><code>_[0]</code>: 创建的项目目录名称</li><li><code>template</code>: 支持默认的几种模板类型，用户可通过 select 命令进行选择</li></ul><p>利用 <code>prompts</code> 使命令行支持用户交互，使用 <code>minimist</code> 解析命令行参数。在 init 函数中编写参数解析逻辑。</p><p>首先，要定义一个模板选择列表的数据结构：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> blue<span class="token punctuation">,</span> green<span class="token punctuation">,</span> yellow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;kolorist&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">ColorFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name">Platform</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  display<span class="token operator">:</span> <span class="token builtin">string</span>
  color<span class="token operator">:</span> ColorFunc
  variants<span class="token operator">:</span> PlatformVariant<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">PlatformVariant</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  display<span class="token operator">:</span> <span class="token builtin">string</span>
  color<span class="token operator">:</span> ColorFunc
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">PLATFORMS</span><span class="token operator">:</span> Platform<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
    display<span class="token operator">:</span> <span class="token string">&#39;Admin&#39;</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> green<span class="token punctuation">,</span>
    <span class="token comment">// 提供 ts 和非 ts 的两种变体选项</span>
    variants<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
        display<span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> yellow<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;admin-ts&#39;</span><span class="token punctuation">,</span>
        display<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> blue<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义了 admin 模板，用于管理后台。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> prompts <span class="token keyword">from</span> <span class="token string">&#39;prompts&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> blue<span class="token punctuation">,</span> green<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> reset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;kolorist&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node:url&#39;</span>

<span class="token comment">// 获取模板名列表</span>
<span class="token keyword">const</span> <span class="token constant">TEMPLATES</span> <span class="token operator">=</span> <span class="token constant">PLATFORMS</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>variants <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span>variants<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span>f<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> renameFiles<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  _gitignore<span class="token operator">:</span> <span class="token string">&#39;.gitignore&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> defaultTargetDir <span class="token operator">=</span> <span class="token string">&#39;hugon-project&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取输出的目标文件夹参数，例 npm create hugon my-hugon，argTargetDir 为 my-hugon</span>
  <span class="token keyword">const</span> argTargetDir <span class="token operator">=</span> <span class="token function">formatTargetDir</span><span class="token punctuation">(</span>argv<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取指定模板参数</span>
  <span class="token keyword">const</span> argTemplate <span class="token operator">=</span> argv<span class="token punctuation">.</span>template

  <span class="token keyword">let</span> targetDir <span class="token operator">=</span> argTargetDir <span class="token operator">||</span> defaultTargetDir
  <span class="token comment">// 获取项目名</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getProjectName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> targetDir <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> targetDir

  <span class="token keyword">let</span> result<span class="token operator">:</span> prompts<span class="token punctuation">.</span>Answers<span class="token operator">&lt;</span><span class="token string">&#39;projectName&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;overwrite&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;packageName&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;template&#39;</span><span class="token operator">&gt;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 按顺序执行询问</span>
    <span class="token comment">// type 为 falsy 值时询问器会跳过当前问题</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// 文本输入框</span>
        type<span class="token operator">:</span> argTargetDir <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 用户响应将会保存到返回响应对象中的这个属性上</span>
        name<span class="token operator">:</span> <span class="token string">&#39;projectName&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 重置命令行文案</span>
        message<span class="token operator">:</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">&#39;Project name:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 默认值</span>
        initial<span class="token operator">:</span> defaultTargetDir<span class="token punctuation">,</span>
        <span class="token comment">// 获取用户响应值</span>
        <span class="token function-variable function">onState</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          targetDir <span class="token operator">=</span> <span class="token function">formatTargetDir</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> defaultTargetDir
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 用户取消操作（按ctrl+C，或 ESC）</span>
      <span class="token function-variable function">onCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;✖&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; 操作已取消&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>cancelled<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cancelled<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">formatTargetDir</span><span class="token punctuation">(</span>targetDir<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> targetDir<span class="token operator">?.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，在命令行输入 <code>create-hugon</code>，命令行交互会提示用户输入项目名，未输入则使用默认名称：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create-hugon create-hugon
? Project name: › hugon-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,21),T={href:"https://github.com/terkelg/prompts",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>接下来完善其它问询：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 按顺序执行询问</span>
  <span class="token comment">// type 为 falsy 值时询问器会跳过当前问题</span>
  result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// ... ...</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 若存项目目录存在并不为空，询问用户是否覆盖</span>
      <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>targetDir<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>targetDir<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;overwrite&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> targetDir <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;当前目录&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">目标目录 &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>targetDir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; 不为空。是否移除存在的文件并继续？</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// type 为函数时，入参签名 (prev, values, prompt)。values 为之前所收集的用户回答</span>
      <span class="token comment">// 若用户选择不覆盖，中止操作</span>
      <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> overwrite <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> overwrite<span class="token operator">?</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>overwrite <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;✖&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; 操作已取消&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;overwriteChecker&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 检查项目名是否合法，不合法需重新输入（会尝试处理为合法值作为默认值）</span>
      <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">isValidPackageName</span><span class="token punctuation">(</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;packageName&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">&#39;项目名称:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 将获取的项目名处理为合法值，并作为默认值</span>
      <span class="token function-variable function">initial</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">toValidPackageName</span><span class="token punctuation">(</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 再次校验用户输入的项目名。返回 true 表示校验通过，返回字符串为用户自定义错误信息</span>
      <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isValidPackageName</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;无效的 package.json name 字段&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 指定的模板不在列表中，则让用户重新从列表选择</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> argTemplate <span class="token operator">&amp;&amp;</span> <span class="token constant">TEMPLATES</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>argTemplate<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;framework&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token keyword">typeof</span> argTemplate <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">TEMPLATES</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>argTemplate<span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>argTemplate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; 不是有效模板. 请从下方选择: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">&#39;选择平台:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">choices</span><span class="token operator">:</span> <span class="token constant">PLATFORMS</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">platform</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span> platform<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span>display <span class="token operator">||</span> platform<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> platform<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 选择平台下的变体</span>
      <span class="token function-variable function">type</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">platform</span><span class="token operator">:</span> Platform</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> platform <span class="token operator">&amp;&amp;</span> platform<span class="token punctuation">.</span>variants <span class="token operator">?</span> <span class="token string">&#39;select&#39;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;variant&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">&#39;选择变体:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">choices</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">platform</span><span class="token operator">:</span> Platform</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> platform<span class="token punctuation">.</span>variants<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">variant</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span> variant<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>variant<span class="token punctuation">.</span>display <span class="token operator">||</span> variant<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> variant<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 用户取消操作</span>
    <span class="token function-variable function">onCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;✖&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; 操作已取消&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>cancelled<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cancelled<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它工具函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;node:path&#39;</span>

<span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">return</span> files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;.git&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">emptyDir</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">===</span> <span class="token string">&#39;.git&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    fs<span class="token punctuation">.</span><span class="token function">rmSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> force<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isValidPackageName</span><span class="token punctuation">(</span>projectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:@[a-z\\d\\-*~][a-z\\d\\-*._~]*\\/)?[a-z\\d\\-~][a-z\\d\\-._~]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>
    projectName<span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将包名转为合法值</span>
<span class="token keyword">function</span> <span class="token function">toValidPackageName</span><span class="token punctuation">(</span>projectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> projectName
    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[._]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-z\\d\\-~]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 复制文件或文件夹</span>
<span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> dest<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">copyDir</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">copyFileSync</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 复制目录</span>
<span class="token keyword">function</span> <span class="token function">copyDir</span><span class="token punctuation">(</span>srcDir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> destDir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>destDir<span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>srcDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> srcFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>srcDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
    <span class="token keyword">const</span> destFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>destDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">return</span> files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;.git&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 删除目录（保留 .git 目录）</span>
<span class="token keyword">function</span> <span class="token function">emptyDir</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">===</span> <span class="token string">&#39;.git&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    fs<span class="token punctuation">.</span><span class="token function">rmSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> force<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取包信息</span>
<span class="token keyword">function</span> <span class="token function">pkgFromUserAgent</span><span class="token punctuation">(</span>userAgent<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userAgent<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token keyword">const</span> pkgSpec <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> pkgSpecArr <span class="token operator">=</span> pkgSpec<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> pkgSpecArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    version<span class="token operator">:</span> pkgSpecArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h3><p>各个模板源码放置于 <code>create-hugon</code> 下，以 <code>template-</code> 开头的目录。如选择 <code>admin/admin-ts</code>，则会以 <code>create-hugon/template-admin-ts</code> 模板生成项目。</p><p>创建项目的主要代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用户选择的选项</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> platform<span class="token punctuation">,</span> overwrite<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> variant <span class="token punctuation">}</span> <span class="token operator">=</span> result
<span class="token keyword">const</span> root <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> targetDir<span class="token punctuation">)</span>

<span class="token comment">// 创建项目文件夹，已存在则先删除其下非 .git 文件夹的文件或文件夹</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">emptyDir</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">template</span><span class="token operator">:</span> string <span class="token operator">=</span> variant <span class="token operator">||</span> platform<span class="token operator">?.</span>name <span class="token operator">||</span> argTemplate

<span class="token comment">// p<wbr>rocess.env.npm_config_user_agent 拿到包含版本信息的用户代理字符串，例如：</span>
<span class="token comment">// &#39;pnpm/6.23.2 npm/? node/v16.13.0 darwin arm64&#39;</span>
<span class="token keyword">const</span> pkgInfo <span class="token operator">=</span> <span class="token function">pkgFromUserAgent</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_user_agent<span class="token punctuation">)</span>
<span class="token keyword">const</span> pkgManager <span class="token operator">=</span> pkgInfo <span class="token operator">?</span> pkgInfo<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&#39;npm&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n在 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>root<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 中创建项目...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token comment">// 模板文件目录</span>
<span class="token keyword">const</span> templateDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
  <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;../..&#39;</span><span class="token punctuation">,</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">template-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>templateDir<span class="token punctuation">)</span>
<span class="token comment">// 复制模板目录的文件到目标目录</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> f <span class="token operator">!==</span> <span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
  fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>templateDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
pkg<span class="token punctuation">.</span>name <span class="token operator">=</span> packageName <span class="token operator">||</span> <span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 修改 package.json 中的 name 字段为项目名称</span>
<span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;package.json&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 输出项目启动引导</span>
<span class="token comment">// ... ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就完成了一个脚手架的雏形。脚手架生成项目的整体流程：</p><ol><li><p>首先询问用户项目名称，如果存在项目名称对应的目录，并且不是空目录，询问用户是否覆盖。如果选择不覆盖，则中止操作；如果选择覆盖，则检查项目名是否合法，不合法需要重新输入。</p></li><li><p>指定模板，如果命令行指定的模板不在模板列表中，让用户重新从列表选择。如果不选择，则使用默认模板。</p></li><li><p>如果上面选择了平台类型，需要再选择其下的具体项目类型。</p></li><li><p>创建项目文件夹，如果目录已存在，则先删除其下非 .git 文件夹的文件或文件夹。</p></li><li><p>修改 package.json 中的 name 字段为项目名称。</p></li><li><p>控制台输出项目启动引导指示。</p></li></ol><h2 id="对比分析" tabindex="-1"><a class="header-anchor" href="#对比分析" aria-hidden="true">#</a> 对比分析</h2><p>主流的脚手架生成方案：</p>`,12),N={href:"https://github.com/vitejs/vite/blob/main/packages/create-vite",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/vuejs/create-vue",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"独立的的模板仓库（区别于上面的两种，在一个仓库中维护一个模板）",-1),C=p('<blockquote><p>上面的 「实现原理」章节所写的 CLI 采用的是 create-vite 的集成式方案。</p></blockquote><h3 id="集成式-create-vite" tabindex="-1"><a class="header-anchor" href="#集成式-create-vite" aria-hidden="true">#</a> 集成式：create-vite</h3><blockquote><p>基于 vite， 生成主流框架基础模板的工具。</p></blockquote><figure><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/b3BMqYgmEm4blwZL/img/955ee67c-908f-44f5-9886-a822ab98f0d9.png#id=EXg2o&amp;originHeight=406&amp;originWidth=832&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>create-vite 属于 vite 项目的一个子包，使用 monorepo 方式管理。</p><p>其下提供了很多模板，如：vanilla，vanilla-ts, vue, vue-ts，react，react-ts等</p><p>可见，它主要是基于选定框架，以及基于语言或特性的变体（如选择生成 vue 项目，可选TS版本或非TS版本的），相对选项式的粒度更粗。</p><p>这是社区目前流行的一种模板管理方式，在此之前使用的是独立的模板仓库。</p><p>通常会以 pnpm <strong>monorepo</strong> 或 lerna 方式（单仓库管理多个项目，对应的是 mutliRepo）管理此类项目，收益是：</p><ul><li>模板集中统一管理，更直观</li><li>工作流程一致性，版本依赖提升。如果依赖发生变化，可以及时同步到其他使用到的 <code>package</code> 中</li><li>降低项目基建成本。所有项目复用一套标准的工具和规范，无需切换开发环境</li><li>团队协作更容易。方便共享和复用代码，方便检索项目源码，简化 commit 记录，统一版本管理</li></ul><h3 id="选项式-create-vue" tabindex="-1"><a class="header-anchor" href="#选项式-create-vue" aria-hidden="true">#</a> 选项式：create-vue</h3><blockquote><p>用于生成基于 vite 的 vue 框架基础模板的工具（可看作 vue-cli 的升级版本）。</p></blockquote><figure><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/b3BMqYgmEm4blwZL/img/8b4ca793-e86c-44e7-9bcc-0ed762980894.png#id=JF3Tt&amp;originHeight=1090&amp;originWidth=1364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图，此类脚手架会提供一些基础特性以供选择，询问是否使用某些特性，根据选择创建模板。</p><p>此类脚手架比较适合生成框架类的，或功能简单的脚手架。优点是选项更灵活。</p><p>因为这些特性大体会以条件分支的形式存在于模板中，然后根据条件判断选择对应的特性。当特性较多较复杂时，会大大增加模板的维护成本。</p><h3 id="独立仓库-vitesse" tabindex="-1"><a class="header-anchor" href="#独立仓库-vitesse" aria-hidden="true">#</a> 独立仓库：vitesse</h3>',17),F={href:"https://github.com/antfu/vitesse",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/Rich-Harris/degit",target:"_blank",rel:"noopener noreferrer"},V=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx degit antfu/vitesse my-project
<span class="token builtin class-name">cd</span> my-project
<span class="token function">pnpm</span> i
<span class="token function">pnpm</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>degit</code> 的优点是可以避免不必要的 Git 仓库克隆，从而提高了克隆速度和效率。</p></blockquote><p>独立仓库式的模板，优点是使用简单，项目结构一目了然。跟集成式的区别，主要在于模板代码的管理方式。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>选项式的脚手架适合简单的项目模板生成，但对于复杂的项目模板生成，建议采用集成式或独立仓库式的模板。这两种模板的区别在于模板的代码管理方式：</p><ul><li><p>集成式的模板采用 <code>monorepo</code> 管理，适合管理多个、相互有关联的模板。</p></li><li><p>独立仓库式的模板更适合做一个大一统、独立的、无依赖的模板。</p></li></ul><p>因此，建议采用类似 <code>create-vite</code> 的方案创建脚手架，同时可以综合参考其他模式，选择最适合自己的模板管理方式。</p><h2 id="创建项目模板" tabindex="-1"><a class="header-anchor" href="#创建项目模板" aria-hidden="true">#</a> 创建项目模板</h2><p>在根目录下执行 <code>pnpm create vite template-admin-ts --template vue-ts</code> 快速创建一个 vue 项目，后续可基于此做模板定制开发。</p><h2 id="发布到-npm" tabindex="-1"><a class="header-anchor" href="#发布到-npm" aria-hidden="true">#</a> 发布到 npm</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> login <span class="token parameter variable">--registry</span> https://registry.npmjs.org/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 package.json 中的 scripts 添加 <code>prepublishOnly</code> 钩子：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;unbuild&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prepublishOnly&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run build&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;publishConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;registry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;template-*&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;README.md&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若本地设置过其它 npm 源，需配置 <code>publishConfig</code> 以在发布时指向原始源。</p><p>设置 <code>files</code> 字段来控制哪些文件会被打包进模块中发布。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>无参数运行，会提示让选择项目名称和模板</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create hugon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可直接指定项目名称和模板。如果想生成 admin-ts 项目，则运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create hugon my-admin-app <span class="token parameter variable">--template</span> admin-ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,22),M={href:"https://github.com/vuejs/create-vue",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/vitejs/vite/tree/main/packages/create-vite",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli",target:"_blank",rel:"noopener noreferrer"};function R(O,$){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,i(" more "),k,n("ul",null,[n("li",null,[n("a",d,[s("prompts"),t(a)]),s("： 处理复杂的用户输入，完成命令行交互")]),n("li",null,[n("a",v,[s("kolorist"),t(a)]),s(": 在终端输出彩色信息文案")]),n("li",null,[n("a",m,[s("commander"),t(a)]),s(": 命令行参数解析")])]),b,n("blockquote",null,[n("p",null,[s("npm 6.1 及以上版本可以使用 npm init 或 npm create 命令启动项目。 npm v6 给 "),n("a",g,[s("init"),t(a)]),s("新增了 create 别名（命令行 npm help create 查看详细文档）。")])]),f,n("blockquote",null,[n("p",null,[h,s(" 命令会用以下形式交由 "),n("a",y,[s("npm exec"),t(a)]),s(" 安装，然后执行其 bin 脚本")]),w]),_,n("p",null,[s("在 package.json 添加编译命令，使用 "),n("a",x,[s("unbuild"),t(a)]),s(" 构建打包，会生成开发时 "),q,s("，用于开发调试，而不用 watch 一直监听文件构建：")]),j,n("blockquote",null,[n("p",null,[s("unbuild 打包后的文件实际使用 "),n("a",S,[s("jiti"),t(a)]),s(" 库作为 require 的替代品，以提高性能。 使用 require 加载模块时，Node.js 会在每次加载模块时重新解析和编译代码。而 jiti 则可以将模块编译成可重用的 JavaScript 函数（并将其缓存起来），从而提高应用程序的性能。")])]),D,n("blockquote",null,[n("p",null,[s("完整的 prompts 用法查看此"),n("a",T,[s("文档"),t(a)])])]),P,n("ul",null,[n("li",null,[s("提供集成式的项目模板（选择少，功能集成度高，更适合业务类的复杂脚手架， 如 "),n("a",N,[s("create-vite"),t(a)]),s("）")]),n("li",null,[s("提供更细致的特性选项（更侧重特性的组合性，通常用于基于框架的简单脚手架， 如 "),n("a",E,[s("create-vue"),t(a)]),s(" / vue-cli）")]),A]),C,n("blockquote",null,[n("p",null,[n("a",F,[s("https://github.com/antfu/vitesse"),t(a)]),s(" vite + vue 的社区模板（集成诸如I18n/PWA/UnoCSS/SSG等企业级应用特性）")])]),n("p",null,[s("此类模板，可以用如 "),n("a",L,[s("degit"),t(a)]),s(" 之类的工具搭建项目。")]),V,n("ul",null,[n("li",null,[n("a",M,[s("vuejs/create-vue"),t(a)])]),n("li",null,[n("a",z,[s("vitejs/vite/packages/create-vite"),t(a)])]),n("li",null,[n("a",I,[s("vue-cli"),t(a)])])])])}const H=e(u,[["render",R],["__file","scaffold-cli.html.vue"]]);export{H as default};
