const t=JSON.parse(`{"key":"v-24ff8f8a","path":"/read-code/utils/mitt.html","title":"mitt 源码阅读笔记","lang":"zh-CN","frontmatter":{"title":"mitt 源码阅读笔记","date":"2023-04-07T00:00:00.000Z","category":["读源码"],"tag":["event-bus"],"description":"mitt 是一个轻量级的 JavaScript 事件总线库，可以用于处理事件和消息传递。mitt 提供了一个简单而强大的 API，用于在程序中实现组件之间的松散耦合通信。 本文将探索 mitt 的源码，了解其实现原理。 了解 Event Emitter / Pub/Sub 在 JavaScript 中，事件发射器（Event Emitter）和发布-订阅（Pub/Sub）模式都属于行为型设计模式。 这两种模式都是用于在程序中实现组件之间的松散耦合，以便它们可以相互通信而不需要直接依赖彼此。这种松散耦合可以提高代码的可维护性和可扩展性。例如，Node.js 中的 EventEmitter 类是一个事件发射器的实现，而 RxJS 库提供了一个强大的发布-订阅模式的实现。","head":[["meta",{"property":"og:url","content":"https://huguangju.cn/read-code/utils/mitt.html"}],["meta",{"property":"og:site_name","content":"Carson's blog"}],["meta",{"property":"og:title","content":"mitt 源码阅读笔记"}],["meta",{"property":"og:description","content":"mitt 是一个轻量级的 JavaScript 事件总线库，可以用于处理事件和消息传递。mitt 提供了一个简单而强大的 API，用于在程序中实现组件之间的松散耦合通信。 本文将探索 mitt 的源码，了解其实现原理。 了解 Event Emitter / Pub/Sub 在 JavaScript 中，事件发射器（Event Emitter）和发布-订阅（Pub/Sub）模式都属于行为型设计模式。 这两种模式都是用于在程序中实现组件之间的松散耦合，以便它们可以相互通信而不需要直接依赖彼此。这种松散耦合可以提高代码的可维护性和可扩展性。例如，Node.js 中的 EventEmitter 类是一个事件发射器的实现，而 RxJS 库提供了一个强大的发布-订阅模式的实现。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-10T08:07:11.000Z"}],["meta",{"property":"article:tag","content":"event-bus"}],["meta",{"property":"article:published_time","content":"2023-04-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-10T08:07:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mitt 源码阅读笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-10T08:07:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"了解 Event Emitter / Pub/Sub","slug":"了解-event-emitter-pub-sub","link":"#了解-event-emitter-pub-sub","children":[]},{"level":2,"title":"源码解析","slug":"源码解析","link":"#源码解析","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"技巧","slug":"技巧","link":"#技巧","children":[{"level":3,"title":"巧用位运算符","slug":"巧用位运算符","link":"#巧用位运算符","children":[]},{"level":3,"title":"创建数组副本","slug":"创建数组副本","link":"#创建数组副本","children":[]}]},{"level":2,"title":"添加 TypeScript 类型","slug":"添加-typescript-类型","link":"#添加-typescript-类型","children":[]},{"level":2,"title":"构建","slug":"构建","link":"#构建","children":[{"level":3,"title":"常用工具和命令","slug":"常用工具和命令","link":"#常用工具和命令","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":3,"title":"类型检测","slug":"类型检测","link":"#类型检测","children":[]},{"level":3,"title":"eslint","slug":"eslint","link":"#eslint","children":[]},{"level":3,"title":"其他 package.json 配置","slug":"其他-package-json-配置","link":"#其他-package-json-配置","children":[]},{"level":3,"title":"打包","slug":"打包","link":"#打包","children":[]},{"level":3,"title":"提交/发布","slug":"提交-发布","link":"#提交-发布","children":[]},{"level":3,"title":"Github 工作流","slug":"github-工作流","link":"#github-工作流","children":[]}]},{"level":2,"title":"文档","slug":"文档","link":"#文档","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1681114031000,"updatedTime":1681114031000,"contributors":[{"name":"huguangju","email":"huguangju@weli.cn","commits":1}]},"readingTime":{"minutes":15.7,"words":4710},"filePathRelative":"read-code/utils/mitt.md","localizedDate":"2023年4月7日","excerpt":"<p><a href=\\"https://github.com/developit/mitt\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">mitt</a> 是一个轻量级的 JavaScript 事件总线库，可以用于处理事件和消息传递。mitt 提供了一个简单而强大的 API，用于在程序中实现组件之间的松散耦合通信。</p>\\n<p>本文将探索 mitt 的源码，了解其实现原理。</p>\\n<h2> 了解 Event Emitter / Pub/Sub</h2>\\n<p>在 JavaScript 中，事件发射器（Event Emitter）和发布-订阅（Pub/Sub）模式都属于行为型设计模式。</p>\\n<p>这两种模式都是用于在程序中实现组件之间的松散耦合，以便它们可以相互通信而不需要直接依赖彼此。这种松散耦合可以提高代码的可维护性和可扩展性。例如，Node.js 中的 EventEmitter 类是一个事件发射器的实现，而 RxJS 库提供了一个强大的发布-订阅模式的实现。</p>\\n","autoDesc":true}`);export{t as data};
