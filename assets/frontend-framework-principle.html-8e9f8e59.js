import{_ as p,W as l,X as o,Y as n,Z as s,$ as e,a0 as a,C as c}from"./framework-5f3abea5.js";const i={},u=a('<h2 id="始识前端框架" tabindex="-1"><a class="header-anchor" href="#始识前端框架" aria-hidden="true">#</a> 始识前端框架</h2><p>确定两个问题：</p><ol><li>React 是库（library）还是框架（framework）?</li><li>Vue 号称是“构建用户界面的渐进式框架”，怎么样理解“渐进式”？</li></ol><hr><p>React 和 Vue 的核心：<strong>构建UI的库</strong>。由两部分组成：</p><ol><li>基于状态的声明式渲染</li><li>组件化的层次结构</li></ol><p>除此之外，还有其它功能：</p><ul><li>状态管理方案：应对复杂应用的状态管理（如 Redux、Pinia）</li><li>客户端路由方案：SPA（如 React-Router、Vue-Router）</li><li>SSR：首屏渲染提速、SEO 优化</li></ul><p>除此之外，还有许多功能是 React/Vue 不包含的，如构建工具、数据流方案、文档工具等。<strong>React/Vue 仅仅是库，而不是框架</strong>。</p><p>可以称 <strong>“包含库本身以及附加功能”的解决方案为框架</strong>，例如：</p><ul><li>UmiJS：基于 React，内置路由、构建、部署等功能的前端框架</li><li>AngularJS: 内置多种功能的前端框架</li></ul><hr><p>所有现代前端框架的实现原理，可以概括为以下公式：</p>',13),r=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"U"),n("mi",null,"I"),n("mo",null,"="),n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," UI = f(state) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])])])],-1),d=n("blockquote",null,[n("p",null,"其中："),n("ul",null,[n("li",null,[s("state 代表：当前"),n("strong",null,"视图状态")]),n("li",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f")]),n("annotation",{encoding:"application/x-tex"},"f")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),s(" 代表：框架"),n("strong",null,"内部运行机制")]),n("li",null,[s("UI 代表：宿主环境的"),n("strong",null,"视图")])])],-1),k=a(`<p>即：<strong>框架内部运行机制根据当前状态渲染视图</strong>。</p><p>据此公式定义一个前端框架的<strong>分类标准</strong>，分析它们的技术特点与实现原理。</p><h3 id="描述-ui" tabindex="-1"><a class="header-anchor" href="#描述-ui" aria-hidden="true">#</a> 描述 UI</h3><p>两种主流方案：JSX、模板语言。</p><p>JSX 是 Meta 提出的一种 “类 XML 语法” 的 ECMAScript 语法糖。如下语句：</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>const element = &lt;h1&gt;Hello world&lt;/h1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由编译工具（babel）编译后为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// React v17 之后</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> jsx <span class="token keyword">as</span> _jsx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react/jsx-runtime&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_jsx</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&quot;Hello world&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// React v17 之前</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),m={href:"https://babeljs.io/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEGAdxACcEATbAegMKA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.21.3&externalPlugins=&assumptions=%7B%7D",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>框架运行时执行后会得到如下数据，该数据会作用渲染 UI 的依据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello, world!&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_owner</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_store</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>React 团队认为 “UI 本质上与逻辑存在耦合的部分”。如：</p><ul><li>在 UI 上绑定事件</li><li>在状态变化后改变 UI 的样式或结构</li></ul><p>用 ES 同时编辑逻辑和描述 UI，可例 UI 与逻辑配合更密切。由于 JSX 是 ES 代码的语法糖，因此它可以更灵活地与其他 ES 语法组合使用。</p><p>JSX的 <strong>灵活性</strong> 可轻松描述 “复杂的 UI”，如与逻辑配合，即可描述 “复杂的 UI 变化”。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>注：高灵活性意味着 JSX 需要牺牲 “潜在的编译优化空间”</p></div><p>模板语言能够简练、直观地表达 U，但 <strong>缺失逻辑的表达能力</strong>（如 Mustache）。</p><p>随着前端与 Node.js 的发展，应用复杂度不断提高，以及前后端分离开始普及，“状态驱动 UI” 的前端框架应运而生。</p><p>JSX 与 模板语法都可以描述逻辑与 UI，但出发点不同。</p><ul><li>模板语法：从 UI 出发，扩展 UI，描述逻辑</li><li>JSX: 从逻辑出发，扩展逻辑，描述 UI</li></ul><h3 id="组织-ui-与逻辑" tabindex="-1"><a class="header-anchor" href="#组织-ui-与逻辑" aria-hidden="true">#</a> 组织 UI 与逻辑</h3><p>为了实现 <strong>UI 与逻辑的关注点分离</strong>，需要一种存放 UI 与逻辑的 <strong>松散耦合单元</strong>，即 <strong>组件</strong>。</p><p>需解释两个问题：</p><ul><li>组件如何组织逻辑与 UI？</li><li>如何在组件间传输数据？</li></ul><p>可借助数学中 “自变量与因变量” 的知识回答上述问题。考虑如下等式</p>`,17),h=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"x"),n("mo",null,"+"),n("mn",null,"1"),n("mo",null,"="),n("mi",null,"y")]),n("annotation",{encoding:"application/x-tex"},"2x + 1 = y")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])])],-1),g=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s(" 的变化会导致 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"y")]),n("annotation",{encoding:"application/x-tex"},"y")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),s(" 的变化，其中 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s(" 被称为自变量，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"y")]),n("annotation",{encoding:"application/x-tex"},"y")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),s(" 被称为因变量。")],-1),b=a(`<p>在 React Hooks 中定义自变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 初始值为 0 的自变量 x</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 取值</span>
<span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自变量普遍由 getter（取值）与 setter（赋值）两部分组成。自变量变化会导致 “依赖它的因变量” 变化。</p><p>因变量有两种：有副作用 和 无副作用的因变量。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>副作用: 函数式编程概念，指 “在函数执行过程中产生对外部环境的影响”。</p><p>除修改函数外部变量外，调用 DOM API、I/O 操作、控制台打印信息等 “函数调用过程中产生的，外部可观察的变化” 都属于副作用。</p></div><p>因变量不需要赋值。“无副作用因变量” 应设计为纯函数，以减少业务开发过程中的潜在bug。</p><p>“自变量变化导致的副作用” 可以交由 “有副作用因变量” 处理，React Hooks 如下定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当依赖的 x 变化，修改页面标题（副作用）</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>回看第一个问题，即组件如何织织逻辑与 UI？</p><p>组件通过三种方式组织逻辑与 UI:</p><ul><li>逻辑中的自变量变化，导致 UI 变化;</li><li>自变量变化，导致 “无副作用因变量” 变化，导致 UI 变化</li><li>自变量变化，导致 “有副作用因变量” 变化，导致副作用</li></ul><h3 id="组件间传输数据" tabindex="-1"><a class="header-anchor" href="#组件间传输数据" aria-hidden="true">#</a> 组件间传输数据</h3><p>组件的自变量或因变量通过 UI 传递给另一个组件，作为其自变量。</p><div class="hint-container info"><p class="hint-container-title">自变量分类</p><p>为区分不同方式产生的自变量，“组件内部定义的自变量”通常被称为 state(状态)，“其他组件传递而来的自变量” 被称为 props（属性）。</p></div><p>当自变量需要 <strong>跨层级传递</strong>时，可通过 store 将自变量直接从 A 传到 C（假设有三个层级的组件，A &gt; B &gt; C）。store 本质上也是自变量，相比 state 它能实现跨层级传递。当项目需要大量使用 store 时，就需要管理 store 的方案（Redux、Pinia）。</p><div class="hint-container info"><p class="hint-container-title">ClassComponent 与 Hooks 谁的开发体验更好？</p><ul><li>使用 ClassComponent，需要了解各种生命周期的执行时机，甚至不同版本的 React 生命周期执行时机都有所区别；</li><li>使用 Hooks，仅需掌握 “自变量与因变量” 即可。</li></ul></div><h3 id="前端框架分类依据" tabindex="-1"><a class="header-anchor" href="#前端框架分类依据" aria-hidden="true">#</a> 前端框架分类依据</h3><p>state 的本质是自变量，自变量通过直接或间接的方式改变 UI。“被改变的 UI” 仅仅是 “对实际宿主环境 UI 的 <strong>描述</strong>”，并不是实际宿主环境的 UI。</p><blockquote><p>例如，JSX 语句仅是对 UI 的描述，需经前端框架处理才能在浏览器中显示真实 UI。</p></blockquote>`,19),f=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"U"),n("mi",null,"I"),n("mo",null,"="),n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"UI = f(state)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])]),s(" 中的 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f")]),n("annotation",{encoding:"application/x-tex"},"f")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f")])])]),s(" 的工作原理：")],-1),y=a(`<ul><li>根据 state 变化计算出 UI 变化；</li><li>根据 UI 变化执行具体宿主环境 API。</li></ul><p>前端框架需要关注 “自变量与 x 的对应关系”。随着 x 抽象层级不断下降，“自变量到 UI 变化” 的路径增多。路径越多，意味着前端框架在运行时消耗在寻找 “自变量与 UI 的对应关系” 上的时间越少。</p><p>所以，前端框架中 “与自变量建立对应关系的抽象层级” 可用为其分类依据，可分为三类：</p><ul><li>应用级框架（React）</li><li>组件级框架（Vue）</li><li>元素级框架（Svelte）</li></ul><h3 id="react-中的自变量与因变理" tabindex="-1"><a class="header-anchor" href="#react-中的自变量与因变理" aria-hidden="true">#</a> React 中的自变量与因变理</h3><p>根据 “自变量与因变量” 理论为常见的 React Hooks 分类：</p><ul><li><code>useState</code>: 定义组件内部的自变量（本质是“内置 reducer 的 useReducer”）</li><li><code>useReducer</code>: 同上，可以看作 “借鉴 Redux 理念的 useState”</li><li><code>useContext</code>: store 的实现，跨层级传递自变量</li><li><code>useMemo</code>: 采用 “缓存的方式” 定义组件内部 “无副作用因变量”</li><li><code>useCallback</code>: 同上，但缓存的值为函数式形</li><li><code>useEffect</code>: 定义组件内部 “有副作用因变量”</li></ul><p>除此之外，<code>useRef</code> 可在定义 UI 与逻辑时能够跳出组件的限制，执行一些 “有副作用的操作”（如：自行操作 DOM）。</p><div class="hint-container info"><p class="hint-container-title">useRef 的用处</p><p>是 reference（引用）的缩写，用于在组件多次 render 之间缓存一个 “引用类型的值”（在多次 render 间共享），可提供操作的灵活性。</p></div><h2 id="前端框架使用的技术" tabindex="-1"><a class="header-anchor" href="#前端框架使用的技术" aria-hidden="true">#</a> 前端框架使用的技术</h2><h3 id="细粒度更新" tabindex="-1"><a class="header-anchor" href="#细粒度更新" aria-hidden="true">#</a> 细粒度更新</h3><p>在 React 中定义因变量时需要显示指明 “因变量依赖的自变量”，而在 Vue 中并不需要显示指明参数。 Vue 中使用的 “能自动追踪依赖的技术” 被称为 “细粒度更新”（Fine Grained Reactivity），它是 Vue 建立 “自变量变化到 UI 变化” 的底层原理。</p><p>实现简单的 “细粒度更新”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 保存 effect 调用栈</span>
<span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> subs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 订阅关系建立</span>
  subs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
  <span class="token comment">// 依赖关系建立</span>
  effect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从该 effect 订阅的所有 state 对应的 subs 中移除该 effect</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> subs <span class="token keyword">of</span> effect<span class="token punctuation">.</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    subs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将该 effect 依赖的所有 state 对的应 subs 移除</span>
  effect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 保存订阅该 state 变化的 effect</span>
  <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 获取当前上下文的 effect</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 建立订阅发布关系</span>
      <span class="token function">subscribe</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> subs<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nextValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> nextValue
    <span class="token comment">// 通知所有订阅该 state 变化的 effect 执行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> effect <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token operator">...</span>subs<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      effect<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重置依赖</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
    <span class="token comment">// 将当前 effect 推入栈顶</span>
    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行回调</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// effect 出栈</span>
      effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">{</span>
    execute<span class="token punctuation">,</span>
    <span class="token literal-property property">deps</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 立刻执行一次</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>s<span class="token punctuation">,</span> setter<span class="token punctuation">]</span> <span class="token operator">=</span> useState
  <span class="token comment">// 首次执行 callback，次始化 value</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 “细粒度更新” 版本的 Hooks 相比 React Hooks 有两个优点：</p><ul><li>无需显示指明依赖</li><li>由于可自动跟踪依赖，因此不受 React Hooks “不能在条件语句中声明 Hooks” 的限制</li></ul><div class="hint-container info"><p class="hint-container-title">React Hooks 为何未使用细粒度更新呢？</p><p>因为 React 属于应用级框架，从关注 “自变量与应用的对应关系” 角度看，其更新粒度不需要很细。</p></div><blockquote><p>上述实现与 React 有一个区别，即 <code>getValue</code> 是函数，而不是自变量的值。Sold.js 使用了这种方式，Vue2/3 中分别使用对象的存取描述符和 Proxy 封装了 getValue，隐藏了其实际是函数的细节。</p></blockquote><h3 id="aot" tabindex="-1"><a class="header-anchor" href="#aot" aria-hidden="true">#</a> AOT</h3><p>现在前端框架需要 “编译” 这一步，用于：</p><ul><li>将 jsx 转为浏览器可识别代码</li><li>代码转换、实现 polyfill等</li><li>编译时优化</li><li>代码打包、压缩、混淆</li></ul><p>“编译” 可选择两个执行时机：</p><ul><li>代码构建时，称为 AOT（Ahead Of Time，预编译）</li><li>在宿主环境执行时，称为 JIT（Just In Time， 即时编译）</li></ul><div class="hint-container info"><p class="hint-container-title">AOT 和 JIT 的区别</p><p>Angular 同时提供这两种编译方案，此处以其举例以说明两者区别。</p><p>在模板中使用未定义的方法，如果使用 AOT，代码在编译后就会立刻报错。如果使用 JIT，则代码在编译后不会报错，而是在浏览器中执行时报错。</p><p>原因是：使用 JIT时，构建阶段仅使用 tsc 将 TS 编译为 JS 并将代码打包，在浏览器执行到 Decorator 时，Angular 的模板编译器才开始编译 template 字段包含的模板语法，并报错。</p><p>当使用 AOT 时，tsc、Angular 的模板编译器会在构建阶段进行编译，立刻能发现错误。</p><p>除此之外，使用 JIT 还有以下区别：</p><ul><li>首次加载时慢于 AOT 应用，因为需先编译代码；</li><li>代码体积可能大于使用 AOT 应用，因为在运行时会增加编译器代码。</li></ul><p>综上，Angular 一般在开发环境中使用 JIT，生产环境中使用 AOT。</p></div><p>借助 AOT 对模板语法编译时的优化，可以减少 “根据自变量变化计算出 UI 变化” 的开销， “采用模板语法描述 UI” 的前端框架都会进行此优化（如 Vue3、Angular、Svelte）。</p><p>基本质原因：模板语法是固定的，意味着 “可分析”，在编译时可标记模板语法中的静态部分与动态部分，在寻找 “变化的 UI” 时可跳过静态部分。</p><blockquote><p>Svelte、Solid.js 甚至利用 AOT 在编译时直接建立 “自变量与 UI 中动态部分的关系 ”，在运行时，自变量发生变化后，可以直接根据 UI 变化执行具体的宿主环境 API。</p></blockquote><p>“采用 JSX 描述 UI” 的前端框架则难以从 AOT 中受益。原因：ES 语句的灵活性使用其很难进行静态分析。</p><p>有两个思路实现上述框架在 AOT 中受益：</p><ul><li>使用新的 AOT 实现</li><li>约束 JSX 的灵活性</li></ul><p>第一种思路 React 尝试过，于 2019 年暂停的 prepack 项目，用于实现 AOT 优化。其思路：在保持运行结果一致下，改变源代码运行逻辑，输出性能更高的代码。即 “代码在编译时将计算结果保留在编译后的代码中”。</p>`,31),x={href:"https://www.solidjs.com/docs/latest/api#%E6%8E%A7%E5%88%B6%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"<For />",-1),_=n("code",null,"<Show />",-1),I=n("code",null,"<Switch>/<Match>",-1),U=a('<p>综上可知，对框架工作原理影响较大的是：减少 “根据自变量变化计算出 UI 变化” 这一步骤的工作量。</p><h3 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a> Virtual DOM</h3><p>虚拟 DOM（简称 VDOM）是实现 “根据自变量变化计算出 UI 变化” 的主流技术，其工作原理可概括为两个步骤：</p><ol><li>将 “元素描述的 UI” 转化为 “VDOM 描述的 UI”；</li><li>对比变化前后 “VDOM 描述的 UI”，计算出 UI 中发生变化</li></ol><p>使用 VDOM 的框架大体遵循以上步骤，仅细节上有区别。比如：</p><ul><li>Vue 使用模板语法描述 UI，模板语法编译为 render 函数</li><li>React 使用 JSX 描述 UI, JSX 编译为 <code>createElement</code> 方法</li></ul><p>VDOM 的本质是 <strong>对 UI 的描述</strong>。</p><p>其优点如下：</p><ul><li>相较于 DOM 的体积优势（DOM 包含大量冗余的属性）；</li><li>相较于 AOT 更强的描述能力；</li><li>跨平台渲染的抽象能力。</li></ul>',9),S={href:"https://github.com/krausest/js-framework-benchmark",target:"_blank",rel:"noopener noreferrer"},M=a(`<p>可见，对于粒度越细的更新，AOT 的优势越大。</p><h2 id="前端框架的实现原理" tabindex="-1"><a class="header-anchor" href="#前端框架的实现原理" aria-hidden="true">#</a> 前端框架的实现原理</h2><h3 id="svelte" tabindex="-1"><a class="header-anchor" href="#svelte" aria-hidden="true">#</a> Svelte</h3><p>Svelte 的 API 设计继承自 Ractive（与 Vue 类似），但与 Vue 在框架实现上有极大不同。原因在于：Svelte 是重度依赖 AOT 的元素及框架。</p><p>借由模板语法的约束，经过 AOT 的编译优化，Svelte 可以直接建立 “自变量与元素的对应关系”。在运行时省略了 “根据自变量计算出 UI 变化” 这一步骤，使用其在执行 “细粒度的更新”（比如更新大列表中的某一行）时比 “使用 VDOM 的框架” 的整体更新路径更短。</p><h3 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h3><p>组件级前端框架，会建立 “自变量与组件的以应关系”，并在此基础上通过 VDOM 寻找 “自变量变化到 UI 变化的关系”。使用模板主语法描述 UI 使用其可从 AOT 中受益。</p><p>示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h1 @click<span class="token operator">=</span>count<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue3 会为每个组件都建立 <code>watchEffect</code>，<code>watchEffect</code> 的回调函数会在 “watchEffect 首次执行时” 以及 “watchEffect 依赖的自变量变化后” 执行如下步骤：</p><p>(1). 调用组件的 render 函数，生成组件对应的 VNode;</p><p>上面的示例编译生成的 render 函数如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">onClick</span><span class="token operator">:</span> _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">_isRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">?</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token operator">:</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span><span class="token function">_unref</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),R={href:"https://sfc.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},A=a(`<p>当自变量发生变化后，effect 会重新执行，<code>render</code> 函数执行后，内部的自变量变化（count 的变化）会被该 effect 订阅。</p><p>(2). 步骤（1）完成后， render 函数的返回值为本次更新的 VNode，它会与上次更新的 VNode 同时传入 <code>patch</code> 方法，执行 VDOM 相关操作，找到 “本次自变量变化导致的元素变化”，并最终执行对应的 DOM 操作。</p><p>点击事件导致 count 发生变化时，Vue3 将执行 “订阅 count 变化的 effect 回调函数”，重复以上两个步骤，完成 UI 渲染。完整的对应关系：</p><ul><li>“自变量变化” 对应 “effect 回调函数执行”；</li><li>“effect 回调函数执行” 对应 “组件 UI 更新”；</li></ul><p>所以 Vue3 被称为组件级框架。</p><p><strong>Vue3 如何从 AOT 中受益？</strong></p><p>模板代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板代码对应的 VNode 会在 patch 方法中一一进行比较。</p><p>上述模板中只的 P 元素是可变的，其余的比较无意义。其编译后的代码如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    _hoisted_1<span class="token punctuation">,</span>
    <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span><span class="token function">_unref</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>P 元素所对应的 <code>_createElementVNode</code> 函数第 4 个传参（<code>PatchFlags</code>）为 1，代码该 VNode 是可变的（不同值代表不同类型）。</p><p>通过减少运行时 VDOM 需要对比的节点，<strong>运行时性能将得到提高</strong>。</p><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><p>实现步骤：</p><ol><li>触发事件，改变自变量，开启更新流程；</li><li>执行 VDOM 相关操作，在 React 中被称为 reconcile；</li><li>根据步骤 2 计算出的 “需要变化的 UI” 执行对应的 UI 操作，在 React 中被称为 commit。</li></ol><p>React 被称为应用级框架的原因：其每次更新流程都是从应用的根节点开始，遍历整个应用。对比其他框架：</p><ul><li>Vue3 的更新流程开始于组件</li><li>Svelte 的更新流程开始于元素</li></ul><p>React 中任何自变量的变化都会开启一次遍历应用的更新流程。</p><div class="hint-container info"><p class="hint-container-title">每次更新都遍历应用，性能会差吗？</p><p>不会。原因有两点：</p><ul><li>React 内部有优化机制</li><li>为开发者提供了相关 API 用于 “减少无意义的遍历过程”，如 <code>shouldComponentUpdate</code>、<code>React.memo</code> 等</li></ul></div><div class="hint-container info"><p class="hint-container-title">Vue 中为何没有这些性能优化 API？</p><p>组件级框架的定位和 AOT 优化已减少了大部分无意义的遍历过程。</p></div><p><strong>由于 React 没有完成这部分性能优化的任务，因此这部分工作交到了开发者手中。</strong></p><p>React 还拓展了许多新功能：</p><ul><li>优先级调度</li><li>Time Slice (时间切片)</li><li>Hooks</li><li>Suspense</li></ul>`,24);function V(O,T){const t=c("ExternalLinkIcon");return l(),o("div",null,[u,r,d,k,n("blockquote",null,[n("p",null,[n("a",m,[s("在线查看"),e(t)]),s(" JSX 编译后结果。")])]),v,h,g,b,f,y,n("p",null,[s("Solid.js 同样使用 JSX，它基于第二种思路，实现了几个内置"),n("a",x,[s("控制流"),e(t)]),s("工具，用于 “在 UI 中描述逻辑”，从而减少 JSX 的灵活性。如 "),w,s("、"),_,s("、"),I]),U,n("p",null,[s("相比于 AOT，“采用 VDOM 的前端框架” 在运行时也能拥有极好的性能。可用 "),n("a",S,[s("krausest/krausejs-framework-benchmark"),e(t)]),s(" 测试不同前端框架在不同场景下的性能基准。")]),M,n("blockquote",null,[n("p",null,[s("可在 "),n("a",R,[s("Vue SFC playground"),e(t)]),s(" 查看完整的编译结果。")])]),A])}const E=p(i,[["render",V],["__file","frontend-framework-principle.html.vue"]]);export{E as default};
