import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-C_1RVQww.js";const l="/assets/node-modules-structure-BMxqC5tU.jpg",t={};function p(h,i){return a(),e("div",null,i[0]||(i[0]=[n(`<h2 id="什么是-pnpm" tabindex="-1"><a class="header-anchor" href="#什么是-pnpm"><span>什么是 pnpm?</span></a></h2><p>performant npm ，意味“高性能的 npm”。 <strong>快速</strong>的，<strong>节省磁盘空间</strong>的包管理工具。</p><h2 id="特性概览" tabindex="-1"><a class="header-anchor" href="#特性概览"><span>特性概览</span></a></h2><ol><li><strong>速度快</strong></li></ol><p>非扁平的包结构，没有 npm3+/yarn 复杂的扁平算法，且只更新变化的文件</p><ol><li><strong>高效利用磁盘空间</strong></li></ol><p>pnpm 内部使用<strong>基于内容寻址</strong>的文件系统来存储磁盘上所有的文件：</p><ul><li>不会重复安装同一个包</li><li>即使一个包的不同版本，pnpm 也会极大程度地复用之前版本的代码（保留未更新文件的hardlink）</li></ul><ol><li><strong>支持 monorepo</strong></li></ol><p>用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的 packages 目录下，那么一个子项目就代表一个package。</p><ol><li><strong>安全性高</strong></li></ol><p>规避非法访问未声明依赖的风险，未在 package.json 中声明的包无法访问。</p><h3 id="与-npm-的区别" tabindex="-1"><a class="header-anchor" href="#与-npm-的区别"><span>与 npm 的区别</span></a></h3><p>pnpm 与 npm 命令使用方法很相似，但有以下区别：</p><ul><li><p>pnpm install 命令会将包安装在项目根目录下的 <code>node_modules/.pnpm-store</code> 目录中。与其他包管理器不同，pnpm 不会将每个包都安装在独立的目录中，而是共享相同的包存储。这可以节省磁盘空间，并且可以加快安装速度，因为相同的包只需要下载一次。</p></li><li><p>安装依赖项时，pnpm 会自动执行依赖项之间的垃圾回收，自动检测哪些包不再被使用，并将其删除，从而进一步减少磁盘占用。</p></li></ul><h2 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h2><h3 id="npm-yarn-install-原理" tabindex="-1"><a class="header-anchor" href="#npm-yarn-install-原理"><span>npm/yarn install 原理</span></a></h3><p>分为两部分：</p><ol><li>执行该命令后，包如何到达项目 node_modules 当中</li><li>node_modules 内部如何管理依赖</li></ol><p>执行命令后，首先会<strong>构建依赖树</strong>。然后针对每个节点下的包会做如下处理:</p><ol><li>解析依赖包版本区间为具体版本号</li><li>下载对应版本依赖的 tar 包到本地离线镜像，并解压到本地缓存</li><li>将依赖从缓存拷贝到当前目录的 node_modules 目录</li></ol><p>npm 1/2中，依赖在 node_modules 中的目录结构为嵌套结构。依赖层层嵌套存在的问题：</p><ol><li>依赖层级太深，会导致文件路径过长的问题（windows）</li><li>大量包被重复安装（A、B包依赖同一个版本的C包，在A、B包下的node_modules会重复安装C包）</li><li>模块实例不能共享（比如两个不同包引入React版本不一致，无法共享内部变量导致未知bug）</li></ol><p>npm3/yarn，通过<strong>扁平化依赖</strong>解决上述问题。所有依赖都被提升到 node_modules 根目录下。</p><p>安装新包时会根据 <code>node require</code> 机制，会不停往上级的 node_modules 当中去找，如果找到相同版本的包就不会重新安装，解决了重复安装包问题，避免依赖层级过深。 但它也存在以下问题：</p><ol><li>依赖结构的<strong>不确定性</strong><ol><li>当A/B两个包同时依赖C包的不同版本，到底把哪个C包版本扁平化到node_modules下取决于A/B包在package.json 中的位置，靠前优先。*-lock.json 文件的诞生才解决此问题（npm 5.x/yarn）。</li></ol></li><li>扁平化算法本身的<strong>复杂性</strong>很高，耗时较长</li><li>项目中仍然可以<strong>非法访问</strong>没有声明过依赖的包</li></ol><h3 id="pnpm-依赖管理" tabindex="-1"><a class="header-anchor" href="#pnpm-依赖管理"><span>pnpm 依赖管理</span></a></h3><p>以安装 express 为例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> express</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>node_modules目录如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">.pnpm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">.modules.yaml</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">express</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 express 仅是一个软链接，其真实的位置在 <code>.pnpm/express@4.18.2/node_modules/express</code>。</p><p>将 <code>包本身</code> 和 <code>依赖</code> 放在同一个node_module下面，与原生 Node 解析完全兼容，又能将 package 与相关的依赖很好地组织到一起，设计精妙。</p><figure><img src="`+l+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>可以看到，node_modules 下面的依赖包跟 package.json 声明的依赖基本保持一致，整体上更清晰规范。</p><h3 id="node-modules-结构" tabindex="-1"><a class="header-anchor" href="#node-modules-结构"><span>node_modules 结构</span></a></h3><p>pnpm 的 node_modules 布局使用<strong>符号链接</strong>来创建依赖项的嵌套结构。 node_modules 中每个包的每个文件都是来自内容可寻址存储的<strong>硬链接</strong>。这项技术被称作“虚拟文件系统”，用于在所有项目间共享依赖项。</p><p>在 pnpm 中，每个项目都有一个名为 <code>.node_modules/.pnpm</code> 的目录，其中包含所有依赖项的符号链接。这些符号链接指向全局存储仓库 <code>~/Library/pnpm/store</code> ，它用于存储所有项目共享的包。。</p><blockquote><p>如果某个包不存在于本地的 <code>node_modules/.pnpm</code> 目录中，则 pnpm 会在 <code>~/Library/pnpm/store</code> 目录中下载该包，并将其安装到本地的 node_modules/.pnpm 目录中。然后，pnpm 会使用硬链接技术将其链接到项目的 node_modules 目录中。</p></blockquote><p><strong>示例：</strong> 假设安装了依赖于 <code>bar@1.0.0</code> 的 <code>foo@1.0.0</code>，会经历以下步骤。</p><ol><li>pnpm 会将两个包硬链接到 node_modules</li><li>创建符号链接来构建嵌套的依赖关系图结构（两个包都硬链接到一个 node_modules 文件夹（foo@1.0.0/node_modules/foo）内的子文件夹中）</li><li>符号链接依赖项（bar 将被符号链接到 foo@1.0.0/node_modules 文件夹） <ol><li>允许包自行导入自已</li><li>避免循环符号链接（依赖以及需要依赖的包被放置在一个文件夹下）</li></ol></li><li>处理直接依赖关系（foo 将被符号链接至根目录的 node_modules 文件夹）</li></ol><p>无论依赖项的数量和依赖关系图的深度如何，布局都会保持上述结构。 这<strong>与 Node 的模块解析算法完全兼容</strong>！ 解析模块时，Node 会忽略符号链接，被依赖项是被解析到其实际位置。</p><p>此布局的一大好处：<strong>只有真正在依赖项中的包才能访问</strong>。使用平铺的 node_modules 结构，所有被提升的包都可以访问。 这避免了 npm3+/yarn 中的非法访问依赖问题。</p><h3 id="处理-peers" tabindex="-1"><a class="header-anchor" href="#处理-peers"><span>处理 peers</span></a></h3><p>peer 依赖项（peer dependencies）会从依赖图中更高的已安装的依赖项中解析（resolve），因为它们与父级共享相同的版本。</p><p>通常，如果一个 package 没有 peer 依赖项（peer dependencies），它会被硬链接到其依赖项的软连接（symlinks）旁的 node_modules。</p><p>但是，如果该 package 有 peer 依赖（peer dependencies），那么它可能就会有多组依赖项，所以pnpm为不同的 peer 依赖项创建不同的解析。Node.js 模块解析器将找到正确的 peers。</p><p>如果一个package的依赖有peer依赖，这些依赖会在更高的依赖图中解析, 则这个传递package便可在项目中有几组不同的依赖项。</p><h2 id="使用-pnpm" tabindex="-1"><a class="header-anchor" href="#使用-pnpm"><span>使用 pnpm</span></a></h2><p>大多数npm/yarn的使用经验可无缝切换到pnpm上。</p><p>常用命令：pnpm <code>install</code>/<code>uninstall</code>/<code>update</code>/<code>link</code></p><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h3><p>pnpm filter 命令可以过滤出符合条件的包，然后对这些包执行指定的操作：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">patter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">comman</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>&lt;pattern&gt;</code> 是一个正则表达式，用于匹配包的名称，<code>&lt;command&gt;</code> 则是要执行的命令，可以是任何 pnpm 支持的命令。例如，要查找所有名称以 react 开头的包，并更新它们的版本，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^react&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>更多用法参考<a href="https://www.pnpm.cn/filtering" target="_blank" rel="noopener noreferrer">官网</a></p></blockquote><h3 id="管理-monorepo-项目" tabindex="-1"><a class="header-anchor" href="#管理-monorepo-项目"><span>管理 monorepo 项目</span></a></h3><p>使用 <code>pnpm init</code>创建项目，配置 <code>pnpm-workspace.yaml</code> 设置 workspace，下面配置表示将 packages 下的所有文件夹都当做一个 package，添加到 monorepo 中进行管理：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">packages:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;packages/**&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>设置工程目录下 package.json 的 private 为 true，防止根目录被发布。</p></blockquote><p>然后创建 packages 文件夹，并在其中创建两个子项目：web端、工具类。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> packages</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   ├──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shared</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   └──</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全局依赖</strong> 像 lodash 这样的全局依赖，可将其安装到根目录，即：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lodash-es</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dw</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>-w 代表在根目录安装依赖</p></blockquote><p><strong>局部依赖</strong> 为指定 package 单独安装依赖，可使用 <a href="https://pnpm.io/zh/filtering" target="_blank" rel="noopener noreferrer">--filter</a> 标志将命令限定于子集。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vue</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --filter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @hugon/web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>package 间的相互依赖</strong> 例如 @hugon/web 依赖 @hugon/shared，基于 pnpm 提供的 <code>workspace:</code>协议，可以方便的在 packages 内部进行互相引用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @hugon/shared</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --filter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @hugon/web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时 web 项目下的 node_modules 中新增了 @hugon/shared 软链以指向该包。 当执行 <code>pnpm publish</code>发布时，会把基于的 workspace 的依赖变成外部依赖，以解决开发和生产环境的依赖问题。</p><p><strong>只允许使用pnpm包管理器</strong> 安装 <code>only-allow</code></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;preinstall&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;npx only-allow pnpm&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="release工作流" tabindex="-1"><a class="header-anchor" href="#release工作流"><span>Release工作流</span></a></h2><p>使用官方推荐之一的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchangesets%2Fchangesets" target="_blank" rel="noopener noreferrer">changesets</a> 来作包的版本管理，它的主要工作是<strong>管理包的version</strong>和<strong>生成changelog</strong>。</p><h3 id="配置-changesets" tabindex="-1"><a class="header-anchor" href="#配置-changesets"><span>配置 changesets</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dw</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @changesets/cli</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 安装到工作空间的根目录中</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> changesets</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 初始化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完初始化命令后，会在工程的根目录下生成 <code>.changeset</code> 目录，其中的 <code>config.json</code> 作为默认的 changeset 的配置文件。 修改配置：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;$schema&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://unpkg.com/@changesets/config@2.0.0/schema.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;changelog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@changesets/cli/changelog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;commit&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;linked&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@hugon/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;access&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;baseBranch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;updateInternalDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;patch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;ignore&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;onlyUpdatePeerDependentsWhenOutOfRange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>changelog: changelog 生成方式</li><li>commit: 不要让 changeset 在 publish 的时候帮我们做 git add</li><li>linked: 配置哪些包要共享版本</li><li>access: 公私有安全设定，内网建议 restricted ，开源使用 public</li><li>baseBranch: 项目主分支</li><li>updateInternalDependencies: 确保某包依赖的包发生 upgrade，该包也要发生 version upgrade 的衡量单位（量级）</li><li>ignore: 不需要变动 version 的包</li><li>___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH: 在每次 version 变动时一定无理由 patch 抬升依赖他的那些包的版本，防止陷入 major 优先的未更新问题</li></ul><h3 id="使用changesets" tabindex="-1"><a class="header-anchor" href="#使用changesets"><span>使用changesets</span></a></h3><p>在工程根目录下 pacakge.json 的 scripts 中增加如下脚本，以便于统一管理所有包的发布过程：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 编译阶段，生成构建产物</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pnpm --filter=@qftjs/* run build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 清理构建产物和 node_modules</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;clear&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rimraf &#39;packages/*/{lib,node_modules}&#39; &amp;&amp; rimraf node_modules&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 执行 changeset，开始交互式填写变更集</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;changeset&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;changeset&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 修改发布包的版本，注意需严格遵循 semver 版本规范</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;version-packages&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;changeset version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 构建后产物发布</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;release&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pnpm build &amp;&amp; pnpm release:only&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;release:only&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;changeset publish --registry=https://registry.npmjs.com/&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用prerelease模式" tabindex="-1"><a class="header-anchor" href="#使用prerelease模式"><span>使用Prerelease模式</span></a></h3><p>发布带 tag 的 prerelease版本 (如beta或者rc版本)，通过 <code>pre enter &lt;tag&gt;</code> 命令进入先进入 pre 模式。 <code>&lt;tag&gt;</code> 包含：alpha、beta、rc。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> changeset</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pre</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> beta</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>之后在此模式下的 changeset publish 均将默认走 beta 环境。完成版本发布之后，退出 Prereleases 模式：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> changeset</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pre</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>pnpm 基于 symlink 和 hard link 机制，解决 npm/yarn 上存在的问题，能高效地管理包的版本及依赖</li><li>pnpm 天然支持使用 monorepo 模式管理项目</li><li>pnpm 能更安全地处理依赖访问和解析问题</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://juejin.cn/post/6932046455733485575" target="_blank" rel="noopener noreferrer">关于现代包管理器的深度思考——为什么现在我更推荐 pnpm 而不是 npm/yarn? - 掘金</a><ul><li>介绍特性：快、省、安全（及原因）、支持monorepo</li><li>介绍 npm/yarn install 原理和存在的问题，及 pnpm 的依赖管理是如何解决的</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/404784010" target="_blank" rel="noopener noreferrer">Pnpm: 最先进的包管理工具</a><ul><li>symlink 和 hard link 机制介绍。store 目录用于存储依赖的 hard links</li><li>symlink 在 windows 存在兼容问题，使用 <a href="https://learn.microsoft.com/en-us/windows/win32/fileio/hard-links-and-junctions" target="_blank" rel="noopener noreferrer">junctions</a> 特性代替</li><li>解决痛点：Phantom dependencies 和 NPM doppelgangers</li><li>pnpm 不适用场景：Electron、部署在 lambda 上的应用</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/546400909" target="_blank" rel="noopener noreferrer">新一代包管理工具 pnpm 使用心得</a><ul><li>dependencies 和 devDependencies 的区别，及 peerDependencies 的使用</li><li>与传统包管理器文件结构对比</li><li>优势：硬链接节省磁盘，软链接优化依赖管理</li><li>老项目迁移，解决幽灵依赖问题，在.npmrc 文件中配置 public-hoist-pattern 或 shamefully-hoist 字段（不推荐）</li></ul></li><li><a href="https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way" target="_blank" rel="noopener noreferrer">Flat node_modules is not the only way | pnpm</a></li><li><a href="https://www.cnblogs.com/itech/archive/2009/04/10/1433052.html" target="_blank" rel="noopener noreferrer">Linux软连接和硬链接 - iTech - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/422740629" target="_blank" rel="noopener noreferrer">Quick Start：用 pnpm 管理 Monorepo 项目</a><ul><li>pnpm 的全局、局部依赖安装方式</li><li>同时运行多个子包命令脚本</li></ul></li><li><a href="https://juejin.cn/post/7098609682519949325" target="_blank" rel="noopener noreferrer">pnpm + workspace + changesets 构建你的 monorepo 工程 - 掘金</a><ul><li>工程初始化及依赖包安装</li><li>使用changesets管理release工作流</li><li>代码及commit规范配置（eslint、commitizen）</li></ul></li><li><a href="https://juejin.cn/post/7184392660939964474" target="_blank" rel="noopener noreferrer">2023 年了！ pnpm monorepo用起来！ - 掘金</a><ul><li>使用rollup打包输入配置（多包相同编译、子包自定义编译输出格式、命令行打包并指定格式、ts打包）</li><li>changesets的使用</li><li>预发布版本</li><li>代码格式校验（lint、prettier、lint-stage、simple-git-hooks）</li><li>代码提交规范（commitzen、commitlint）</li></ul></li></ul>`,93)]))}const o=s(t,[["render",p],["__file","pnpm-intro.html.vue"]]),k=JSON.parse('{"path":"/engineering/pnpm-intro.html","title":"pnpm 特性及基本使用","lang":"zh-CN","frontmatter":{"title":"pnpm 特性及基本使用","date":"2023-02-20T00:00:00.000Z","category":["工程化"],"tag":["pnpm"],"description":"什么是 pnpm? performant npm ，意味“高性能的 npm”。 快速的，节省磁盘空间的包管理工具。 特性概览 速度快 非扁平的包结构，没有 npm3+/yarn 复杂的扁平算法，且只更新变化的文件 高效利用磁盘空间 pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件： 不会重复安装同一个包 即使一个包的不同版本，pnpm 也...","head":[["meta",{"property":"og:url","content":"https://huguangju.cn/engineering/pnpm-intro.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"pnpm 特性及基本使用"}],["meta",{"property":"og:description","content":"什么是 pnpm? performant npm ，意味“高性能的 npm”。 快速的，节省磁盘空间的包管理工具。 特性概览 速度快 非扁平的包结构，没有 npm3+/yarn 复杂的扁平算法，且只更新变化的文件 高效利用磁盘空间 pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件： 不会重复安装同一个包 即使一个包的不同版本，pnpm 也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T05:33:38.000Z"}],["meta",{"property":"article:tag","content":"pnpm"}],["meta",{"property":"article:published_time","content":"2023-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-21T05:33:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pnpm 特性及基本使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-21T05:33:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"huguangju\\",\\"url\\":\\"https://huguangju.cn\\"}]}"]]},"headers":[{"level":2,"title":"什么是 pnpm?","slug":"什么是-pnpm","link":"#什么是-pnpm","children":[]},{"level":2,"title":"特性概览","slug":"特性概览","link":"#特性概览","children":[{"level":3,"title":"与 npm 的区别","slug":"与-npm-的区别","link":"#与-npm-的区别","children":[]}]},{"level":2,"title":"依赖管理","slug":"依赖管理","link":"#依赖管理","children":[{"level":3,"title":"npm/yarn install 原理","slug":"npm-yarn-install-原理","link":"#npm-yarn-install-原理","children":[]},{"level":3,"title":"pnpm 依赖管理","slug":"pnpm-依赖管理","link":"#pnpm-依赖管理","children":[]},{"level":3,"title":"node_modules 结构","slug":"node-modules-结构","link":"#node-modules-结构","children":[]},{"level":3,"title":"处理 peers","slug":"处理-peers","link":"#处理-peers","children":[]}]},{"level":2,"title":"使用 pnpm","slug":"使用-pnpm","link":"#使用-pnpm","children":[{"level":3,"title":"filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"管理 monorepo 项目","slug":"管理-monorepo-项目","link":"#管理-monorepo-项目","children":[]}]},{"level":2,"title":"Release工作流","slug":"release工作流","link":"#release工作流","children":[{"level":3,"title":"配置 changesets","slug":"配置-changesets","link":"#配置-changesets","children":[]},{"level":3,"title":"使用changesets","slug":"使用changesets","link":"#使用changesets","children":[]},{"level":3,"title":"使用Prerelease模式","slug":"使用prerelease模式","link":"#使用prerelease模式","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1732167218000,"updatedTime":1732167218000,"contributors":[{"name":"huguangju","email":"huguangjugit@163.com","commits":1}]},"readingTime":{"minutes":10.29,"words":3088},"filePathRelative":"engineering/pnpm-intro.md","localizedDate":"2023年2月20日","excerpt":"<h2>什么是 pnpm?</h2>\\n<p>performant npm ，意味“高性能的 npm”。\\n<strong>快速</strong>的，<strong>节省磁盘空间</strong>的包管理工具。</p>\\n<h2>特性概览</h2>\\n<ol>\\n<li><strong>速度快</strong></li>\\n</ol>\\n<p>非扁平的包结构，没有 npm3+/yarn 复杂的扁平算法，且只更新变化的文件</p>\\n<ol>\\n<li><strong>高效利用磁盘空间</strong></li>\\n</ol>\\n<p>pnpm 内部使用<strong>基于内容寻址</strong>的文件系统来存储磁盘上所有的文件：</p>","autoDesc":true}');export{o as comp,k as data};
