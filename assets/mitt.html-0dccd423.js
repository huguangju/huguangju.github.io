import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as l,a0 as e,C as i}from"./framework-5f3abea5.js";const u={},r={href:"https://github.com/developit/mitt",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"本文将探索 mitt 的源码，了解其实现原理。",-1),k=n("h2",{id:"了解-event-emitter-pub-sub",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#了解-event-emitter-pub-sub","aria-hidden":"true"},"#"),s(" 了解 Event Emitter / Pub/Sub")],-1),v=n("p",null,"在 JavaScript 中，事件发射器（Event Emitter）和发布-订阅（Pub/Sub）模式都属于行为型设计模式。",-1),m=n("p",null,"这两种模式都是用于在程序中实现组件之间的松散耦合，以便它们可以相互通信而不需要直接依赖彼此。这种松散耦合可以提高代码的可维护性和可扩展性。例如，Node.js 中的 EventEmitter 类是一个事件发射器的实现，而 RxJS 库提供了一个强大的发布-订阅模式的实现。",-1),b=e(`<div class="hint-container info"><p class="hint-container-title">事件发射器模式</p><p>是一种基于事件的设计模式，它使用一个事件发射器对象来管理事件和事件监听器。事件发射器对象维护一个事件列表，其中每个事件都有一个名称和一个或多个事件监听器。当事件发射器对象触发一个事件时，所有监听该事件的事件监听器都会被调用，并传递给它们相关的数据。事件发射器模式通常用于<strong>处理异步事件</strong>，例如用户交互、网络请求和定时器等。</p></div><div class="hint-container info"><p class="hint-container-title">发布-订阅模式</p><p>是一种基于消息的设计模式，它使用一个主题（或发布者）对象来管理消息和订阅者对象。主题对象维护一个消息列表，其中每个消息都有一个名称和一个或多个订阅者。当主题对象发送一条消息时，所有订阅该消息的订阅者都会收到该消息，并采取适当的行动。发布-订阅模式通常用于<strong>处理解耦逻辑</strong>，例如模块之间的通信、组件之间的通信和跨页面的通信等。</p></div><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h2><p>mitt 的核心源码只包含了一个函数，它返回一个事件管理对象（下面的代码移除 TypeScript 相关内容，以便于理解）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创建事件发射器，用于注册、移除和触发事件
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Map<span class="token punctuation">}</span></span> <span class="token parameter">all</span> - 存储所有事件类型及其对应的处理函数的 Map 对象
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> - 包含 all、on、off 和 emit 方法的对象
 */</span>
<span class="token keyword">function</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token parameter">all</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  all <span class="token operator">=</span> all <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事件名称与已注册的处理函数之间的映射表</span>
    all<span class="token punctuation">,</span>

    <span class="token doc-comment comment">/**
     * 注册事件处理函数
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">type</span> - 要监听的事件类型（用 \`&#39;*&#39;\` 表示所有事件）
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">handler</span> - 响应指定事件时要调用的函数
     */</span>
    <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取事件类型对应的处理函数列表</span>
      <span class="token keyword">const</span> handlers <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 已有处理函数，将新处理函数添加到处理函数列表；没有，则用新处理函数初始化处理函数列表</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        all<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>handler<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token doc-comment comment">/**
     * 注销事件处理函数
     * 如果省略 \`handler\`，则会注销所有指定类型的处理程序
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">type</span> - 要注销注册 \`handler\` 的事件类型（用 \`&#39;＊&#39;\` 删除通配符处理程序）
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">handler</span> - 要注销的处理函数
     */</span>
    <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> handlers <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果指定了要注销的事件处理函数，从处理函数列表中移除它；</span>
        <span class="token comment">// 未指定，则将该事件类型的处理函数列表清空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>handlers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          all<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token doc-comment comment">/**
     * 触发事件，调用指定类型的所有处理程序。
     * 如果存在，将在匹配类型的处理程序之后调用 \`&#39;*&#39;\` 处理程序。
     * 
     * 注意：不支持手动触发 &#39;*&#39; 处理程序
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">type</span> - 要触发的事件类型
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">}</span></span> <span class="token parameter">evt</span> - 传递给每个事件处理函数的参数（推荐对象）
     */</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> handlers <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果有处理函数，依次调用处理函数并传入参数</span>
        <span class="token comment">// 注：使用 slice 函数用于创建数组的副本，避免影响原始列表</span>
        handlers
          <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handler</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 获取通配符事件类型对应的处理函数列表，有则依次调用并传参</span>
      handlers <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        handlers
          <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handler</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 监听一个事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token comment">// 监听所有事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token comment">// 触发一个事件</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 清除所有事件</span>
emitter<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 使用处理函数引用</span>
<span class="token keyword">function</span> <span class="token function">onFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> onFoo<span class="token punctuation">)</span>   <span class="token comment">// 监听</span>
emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> onFoo<span class="token punctuation">)</span>  <span class="token comment">// 移除监听</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧" aria-hidden="true">#</a> 技巧</h2><h3 id="巧用位运算符" tabindex="-1"><a class="header-anchor" href="#巧用位运算符" aria-hidden="true">#</a> 巧用位运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>handlers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&gt;&gt;&gt; 0</code> 是一种位运算技巧，用于将索引转换为非负整数（因为 JavaScript 中的位运算符只能用于 32 位整数）。</p><p><code>handlers.indexOf(handler)</code> 返回指定处理函数在处理函数列表中的索引，如果处理函数不存在于列表中，则返回 -1。 此时，执行 <code>-1 &gt;&gt;&gt; 0</code>，其结果为 4294967295，远大于 handlers 数组长度。 当 <code>splice()</code> 方法的第一个参数大于或等于数组的长度时，它不会删除任何元素。</p><p>这样做的目的是为了<strong>避免出现负数索引值</strong>，因为负数索引值会导致删除错误的处理函数。</p><div class="hint-container info"><p class="hint-container-title">-1 &gt;&gt;&gt; 0 的执行过程</p><p>在 JavaScript 中可使用 <code>&gt;&gt;&gt;</code> 将有符号整数转为无符号整数。</p><p>将 <code>-1</code> 表示为二进制数，即 <code>11111111 11111111 11111111 11111111</code>。 执行无符号右移操作，将该二进制数向右移动 0 位，即不移动，得到的结果仍为 <code>11111111 11111111 11111111 11111111</code>。 将结果转换为十进制数，即 4294967295。因此，<code>-1 &gt;&gt;&gt; 0</code> 的结果为 4294967295。</p></div><h3 id="创建数组副本" tabindex="-1"><a class="header-anchor" href="#创建数组副本" aria-hidden="true">#</a> 创建数组副本</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>handlers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handler</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>slice()</code> 方法可以在不修改原始数组的情况下创建一个新的数组副本，它包含原始数组中的所有元素，因此对新数组的操作不会影响原始数组。</p><p>除此之外，还有以下几种方式可复制数组：</p><ul><li><code>arr.concat[]</code></li><li>展开运算符 <code>[...arr]</code></li><li>Array.from(arr)</li></ul><h2 id="添加-typescript-类型" tabindex="-1"><a class="header-anchor" href="#添加-typescript-类型" aria-hidden="true">#</a> 添加 TypeScript 类型</h2><p>定义基础类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EventType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span>

<span class="token comment">// 事件处理器，可选的事件参数，不返回值</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Handler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token comment">// 定义一个通用的事件处理函数类型，可以处理多种不同类型的事件</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">WildcardHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>
 type<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token comment">// 必须是 T 类型中的某个属性名称</span>
 event<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token comment">// 必须是 T 类型中所有属性值的联合类型</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token comment">// 一个包含当前已注册的某种类型事件处理程序的数组</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EventHandlerList<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Handler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">WildCardEventHandlerList<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>WildcardHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 一个 Map 类型，用于存储事件类型及其处理函数列表</span>
<span class="token comment">// 在 TypeScript 中，Map 是一个泛型类型，可以指定键和值的类型。例如，Map&lt;string, number&gt; 表示一个键为字符串类型，值为数字类型的 Map 对象。</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EventHandlerMap<span class="token operator">&lt;</span>Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>EventType<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> Map<span class="token operator">&lt;</span>
  <span class="token keyword">keyof</span> Events <span class="token operator">|</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// EventHandlerList&lt;Events[keyof Events]&gt; 表示一个处理 Events[keyof Events] 类型事件的处理函数列表，也就是说，事件类型为 Events 中所有属性值的联合类型。</span>
  <span class="token comment">// WildCardEventHandlerList&lt;Events&gt; 表示一个处理所有事件类型的处理函数列表</span>
  EventHandlerList<span class="token operator">&lt;</span>Events<span class="token punctuation">[</span><span class="token keyword">keyof</span> Events<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">|</span> WildCardEventHandlerList<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件管理对象:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Emitter<span class="token operator">&lt;</span>Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>EventType<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span> <span class="token punctuation">{</span>
  all<span class="token operator">:</span> EventHandlerMap<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> handler<span class="token operator">:</span> Handler<span class="token operator">&lt;</span>Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">// 通配符事件类型 &#39;*&#39; 的重载</span>
  <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> handler<span class="token operator">:</span> WildcardHandler<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token generic-function"><span class="token function">off</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> handler<span class="token operator">?</span><span class="token operator">:</span> Handler<span class="token operator">&lt;</span>Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">off</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> handler<span class="token operator">:</span> WildcardHandler<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

  <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> event<span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token keyword">extends</span> <span class="token class-name">Events</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">?</span> Key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 mitt 函数中使用上述定义的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mitt</span><span class="token generic class-name"><span class="token operator">&lt;</span>Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>EventType<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>all<span class="token operator">?</span><span class="token operator">:</span> EventHandlerMap<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Emitter<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 两种事件处理器的联合类型</span>
  <span class="token keyword">type</span> <span class="token class-name">GenericEventHandler</span> <span class="token operator">=</span><span class="token operator">|</span> Handler<span class="token operator">&lt;</span>Events<span class="token punctuation">[</span><span class="token keyword">keyof</span> Events<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">|</span> WildcardHandler<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> handler<span class="token operator">:</span> GenericEventHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token generic-function"><span class="token function">off</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> handler<span class="token operator">?</span><span class="token operator">:</span> GenericEventHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> evt<span class="token operator">?</span><span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建" tabindex="-1"><a class="header-anchor" href="#构建" aria-hidden="true">#</a> 构建</h2><p>项目构建从 scripts 命令定义看起。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 运行 &quot;typecheck&quot;, &quot;lint&quot;, &quot;mocha&quot; 和 &quot;test-types&quot; 命令</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all --silent typecheck lint mocha test-types&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 &quot;test&quot; 目录下的 mocha 测试</span>
    <span class="token property">&quot;mocha&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mocha test&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 TypeScript 编译器，检查 test/test-types-compilation.ts 文件的类型，但不生成任何输出</span>
    <span class="token property">&quot;test-types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc test/test-types-compilation.ts --noEmit --strict&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 ESLint 检查 src 和 test 目录下的 .ts 和 .js 文件</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src test --ext ts --ext js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 TypeScript 编译器，检查 TypeScript 代码的类型，但不生成任何输出</span>
    <span class="token property">&quot;typecheck&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc --noEmit&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用 microbundle 将模块打包成 ES、CommonJS 和 UMD 格式</span>
    <span class="token property">&quot;bundle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;microbundle -f es,cjs,umd&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 &quot;clean&quot;, &quot;bundle&quot; 和 &quot;docs&quot; 命令</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm-run-all --silent clean -p bundle -s docs&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 删除 dist 目录</span>
    <span class="token property">&quot;clean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rimraf dist&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用 documentation 工具生成 API 文档</span>
    <span class="token property">&quot;docs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;documentation readme src/index.ts --section API -q --parse-extension ts&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 运行 &quot;build&quot;, &quot;test&quot; 命令，提交代码，打标签，推送到 Git 仓库，发布到 npm</span>
    <span class="token property">&quot;release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run -s build -s &amp;&amp; npm t &amp;&amp; git commit -am $npm_package_version &amp;&amp; git tag $npm_package_version &amp;&amp; git push &amp;&amp; git push --tags &amp;&amp; npm publish&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用工具和命令" tabindex="-1"><a class="header-anchor" href="#常用工具和命令" aria-hidden="true">#</a> 常用工具和命令</h3><p><strong><code>npm-run-all</code></strong>：提供简单的方式来运行多个 npm scripts 命令。如上面的 <code>npm-run-all --silent typecheck lint mocha test-types</code> 命令，将按照定义的顺序依次运行。</p><p>其它参数：</p><ul><li><code>--silent</code>：禁止输出额外的信息，使输出更简洁</li><li><code>-p</code>：并行运行多个命令</li><li><code>-s</code>：指定一组任务按照顺序依次执行</li></ul><p><strong><code>rimraf</code></strong>：跨平台的 Node.js 模块，提供简单的方式来删除文件和目录。它的作用类似于 Unix/Linux 系统中的 <code>rm -rf</code> 命令，但也可以在 Windows 系统中使用。</p><p><strong>npm t</strong>：<code>npm test</code> 的别名</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>本库使用 <code>Mocha</code> 写测试，<code>mocha test</code> 命令会运行 mocha 测试，它会查找 <code>test</code> 目录下的测试文件，并执行这些测试。</p><p>其配置在 package.json 中，将会被 mocha 命令读取并应用到测试运行中:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;mocha&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定测试文件的扩展名为 &quot;.ts&quot;</span>
    <span class="token property">&quot;extension&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;ts&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定需要在测试运行前加载的模块。这里指定了 &quot;ts-node/register&quot; 和 &quot;esm&quot; 模块，它们分别用于支持 TypeScript 和 ES modules</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;ts-node/register&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;esm&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定测试文件的位置，这里表示所有以 &quot;_test.ts&quot; 结尾的文件都会被作为测试文件运行</span>
    <span class="token property">&quot;spec&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;test/*_test.ts&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),h={href:"https://github.com/chaijs/chai",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Chai",-1),y={href:"https://github.com/sinonjs/sinon",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"Sinon",-1),f=e(`<div class="hint-container info"><p class="hint-container-title">Mocha</p><p>测试框架，可编写和运行代码测试。提供了简单灵活的语法来定义测试用例，并且可以与各种断言库一起使用，以对代码的行为进行断言。 Mocha 可以在浏览器和 Node.js 环境中运行测试，并通过使用回调、Promises 和 async/await 实现异步测试。</p><p>Mocha 还具有丰富的功能，例如测试分组、测试跳过和测试覆盖报告等。总的来说，Mocha 是一个确保 JavaScript 代码质量和正确性的好工具。</p></div><h3 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h3><p><code>tsc</code> 是 TypeScript 的编译器命令，用于将 TypeScript 代码编译为 JavaScript 代码。<code>--noEmit</code> 是 tsc 命令的一个选项，表示编译器不会将编译后的 JavaScript 代码写入到文件中，而只会对代码进行<strong>类型检查和语法分析</strong>等操作。</p><p>这个选项通常用于在开发过程中进行类型检查，而不生成任何实际的输出文件。这可在开发过程中尽早地发现类型错误，从而减少调试时间和代码错误。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>--noEmit</code> 选项并不会完全禁止 tsc 编译器的输出，它仍然会向终端输出类型检查和语法分析的结果。可以使用 <code>--pretty false</code> 选项完全禁止 tsc 编译器的输出。</p></div><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h3><p>eslint 采用在 package.json 内配置的方式（也可使用独立的 <code>.eslintrc</code> 配置文件）。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;eslintConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定一个或多个已有的ESLint配置文件，以便继承其中的规则和选项</span>
    <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;developit&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// plugin: 表示对 @typescript-eslint 插件下的某一类配置对象的引用</span>
      <span class="token string">&quot;plugin:@typescript-eslint/eslint-recommended&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 专门用于解析 TypeScript 代码的解析器</span>
    <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 要解析的代码是 ES6 模块</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token property">&quot;mocha&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token property">&quot;jest&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token property">&quot;es6&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定了 expect 变量为全局变量，用于在测试中使用断言库</span>
    <span class="token property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;expect&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定ESLint应该忽略的文件或目</span>
  <span class="token property">&quot;eslintIgnore&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;index.d.ts&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>extends：指定要使用的ESLint配置。</li><li>parser：指定解析器。</li><li>parserOptions：指定解析器的选项。</li><li>env：指定代码运行的环境。</li><li>globals：指定全局变量。</li><li>rules：指定要应用的规则。</li></ul><h3 id="其他-package-json-配置" tabindex="-1"><a class="header-anchor" href="#其他-package-json-配置" aria-hidden="true">#</a> 其他 package.json 配置</h3><p>以下属性都是为了让模块可以在不同的环境下被正确地导入和使用，以提高模块的可移植性和兼容性。同时，<code>microbundle</code> 打包时也可能用到其中的配置。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 定义了 ES6 模块规范的入口文件。当使用现代打包工具（如 webpack、Rollup 等）构建项目时，会自动使用这个属性指定的文件作为入口，以支持 ES6 模块的导入和导出。</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/mitt.mjs&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了 CommonJS 规范的入口文件。当使用 Node.js 运行时或者其他支持 CommonJS 规范的环境时，会自动使用这个属性指定的文件作为入口。</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/mitt.js&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了 ES6 模块规范的入口文件。这个属性主要是为了向老版本的打包工具提供兼容性支持，因为老版本的打包工具不支持 module 属性。</span>
  <span class="token property">&quot;jsnext:main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/mitt.mjs&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了 UMD 规范的入口文件。当使用不支持 ES6 模块或 CommonJS 规范的环境时，会自动使用这个属性指定的文件作为入口。</span>
  <span class="token property">&quot;umd:main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/mitt.umd.js&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了源代码文件的入口。这个属性通常用于调试和开发环境，因为它可以让开发者在调试时直接跳转到源代码文件，而不是跳转到编译后的文件。</span>
  <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/index.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了 TypeScript 类型定义文件的路径。这个属性通常用于 TypeScript 项目，它告诉 TypeScript 编译器在编译时需要将这个文件作为类型定义文件使用。</span>
  <span class="token property">&quot;typings&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.d.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 定义了模块的导出方式。是可以指定多个导出方式的对象，包括 import、require、types 和 default。以便在不同的环境下使用不同的导出方式，以适应不同的场景。</span>
  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.d.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/mitt.mjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/mitt.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/mitt.mjs&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 用于指定哪些文件是该模块的一部分，这些文件将会被打包到该模块中，以便在其他项目中使用。</span>
  <span class="token comment">// 默认情况下，所有文件都会被打包到该模块中，包括 node_modules 目录和测试文件等。</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;index.d.ts&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h3>`,13),w={href:"https://github.com/developit/microbundle",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"microbundle",-1),E=e(`<p>其特点是简单易用，无需配置，只需要在命令行中运行 <code>microbundle</code> 命令即可进行打包。另外，它还支持一些常用的特性，比如压缩、代码分离等等。</p><p>在 <code>microbundle -f es,cjs,umd</code> 命令中，<code>-f</code> 参数用于指定打包的格式，可以同时指定多个格式，用逗号隔开。 在这个命令中，<code>es</code> 表示打包成 ES modules 格式，<code>cjs</code> 表示打包成 CommonJS 格式，<code>umd</code> 表示打包成 UMD 格式。</p><p>如果不指定 <code>-f</code> 参数，默认情况下 microbundle 会打包成 CommonJS 和 ES modules 格式。</p><h3 id="提交-发布" tabindex="-1"><a class="header-anchor" href="#提交-发布" aria-hidden="true">#</a> 提交/发布</h3><p><code>release</code> 上提供了提交代码，打标签，推送到 Git 仓库，发布到 npm 等操作。</p><ul><li><code>git commit -am $npm_package_version</code>：提交代码，并使用当前版本号作为提交信息。</li><li><code>git tag $npm_package_version</code>：打标签，并使用当前版本号作为标签名</li><li><code>git push</code>: 推送代码到 Git 仓库</li><li><code>git push --tags</code>: 推送标签到 Git 仓库</li><li><code>npm publish</code>：发布包到 npm</li></ul><div class="hint-container info"><p class="hint-container-title">$npm_package_version</p><p>是一个环境变量，它包含了当前项目的版本号。在 <code>npm scripts</code> 命令中，可以使用 <code>$npm_package_version</code> 来引用当前项目的版本号。这个环境变量是由 npm 在运行命令时自动设置的，无需手动设置。</p></div><h3 id="github-工作流" tabindex="-1"><a class="header-anchor" href="#github-工作流" aria-hidden="true">#</a> Github 工作流</h3><p>工作流用于在 GitHub 上进行持续集成（CI），配置文件放在 .github 目录下。</p><p><code>.github/main.yml</code> 文件在项目的 <code>pull request</code> 和 <code>push</code> 事件中触发自动化构建和测试，配置如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 定义名为 CI 的工作流</span>
name: CI

on:
  <span class="token comment"># 当有新的 pull request 提交时，且提交的分支名符合 ** 通配符模式时；</span>
  pull_request:
    branches:
      - <span class="token string">&quot;**&quot;</span>
  <span class="token comment"># 当在 main 分支上进行 push 操作时。</span>
  push:
    branches:
      - main

jobs:
  <span class="token comment"># 定义名为 build 作业（job）</span>
  build:
    <span class="token comment"># 指定运行环境为 ubuntu-latest</span>
    runs-on: ubuntu-latest
    <span class="token comment"># 定义步骤</span>
    steps:
      <span class="token comment"># 使用 actions/checkout@v2 动作来检出代码库</span>
      - uses: actions/checkout@v2
      <span class="token comment"># 使用 actions/setup-node@v2 动作来安装 Node.js 运行环境，指定版本为 14</span>
      - uses: actions/setup-node@v2
        with:
          node-version: <span class="token number">14</span>
      <span class="token comment"># 定义一个名为 npm install, build, and test 的步骤</span>
      - name: <span class="token function">npm</span> install, build, and <span class="token builtin class-name">test</span>
        <span class="token comment"># 包含以下命令</span>
        run: <span class="token operator">|</span>
          <span class="token function">npm</span> <span class="token function">install</span>
          <span class="token function">npm</span> run build --if-present <span class="token comment"># 如果有定义 build 命令，则运行该命令，用于打包构建项目；</span>
          <span class="token function">npm</span> <span class="token builtin class-name">test</span>
        <span class="token comment"># 定义一个名为 CI 的环境变量，将其值设为 true</span>
        env:
          CI: <span class="token boolean">true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>compressed-size.yml</code> 工作流文件定义了一个名为 <code>Compressed Size</code> 的工作流，主要使用 <code>preactjs/compressed-size-action@v2</code> 动作来计算代码库中指定文件的压缩大小，pattern 参数用于指定要计算压缩大小的文件路径模式。</p><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h2>`,13),_={href:"https://github.com/documentationjs/documentation",target:"_blank",rel:"noopener noreferrer"},j=e('<p><code>documentation</code> 是一个 JavaScript 文档生成工具，它可以根据代码中的注释自动生成文档。它支持多种文档格式，包括 HTML、Markdown、JSON 和 DocPad 等。</p><p>如上文定义的 docs 命令，<code>&quot;docs&quot;: &quot;documentation readme src/index.ts --section API -q --parse-extension ts&quot;</code>。该命令的作用在 <code>src/index.ts</code> 文件中查找 API 部分的注释（使用 <code>--section API</code> 参数），并将其转换为 Markdown 格式的文档输出到控制台（<code>readme</code> 参数）。其中，<code>-q</code> 参数表示以安静模式运行，不输出冗余信息，<code>--parse-extension ts</code> 参数表示解析 TypeScript 文件。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>mitt 是一个非常小巧、灵活的 JavaScript 事件管理库，它的源码非常简洁。通过分析 mitt 的源码，可以了解了它是如何实现事件管理的。</p>',4);function S(T,H){const a=i("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[n("a",r,[s("mitt"),t(a)]),s(" 是一个轻量级的 JavaScript 事件总线库，可以用于处理事件和消息传递。mitt 提供了一个简单而强大的 API，用于在程序中实现组件之间的松散耦合通信。")]),d,k,v,m,l(" more "),b,n("p",null,[s("并使用 "),n("a",h,[g,t(a)]),s(" 和 "),n("a",y,[q,t(a)]),s(" 库来进行单元测试。其中，Chai 提供了一组断言函数，用于判断测试结果是否符合预期，而 Sinon 则提供了一组用于创建测试所需的测试桩和测试桩验证函数等工具函数。")]),f,n("p",null,[s("本项目使用 "),n("a",w,[s("microbundle"),t(a)]),s(" 打包。"),x,s(" 是一个零配置的 JavaScript 模块打包工具，可以将 JavaScript 模块打包成 CommonJS、ES modules 和 UMD 格式，从而可以在 Node.js 和浏览器环境中使用。")]),E,n("p",null,[s("本库的 API 文件使用 "),n("a",_,[s("documentation"),t(a)]),s(" 自动生成。")]),j])}const C=p(u,[["render",S],["__file","mitt.html.vue"]]);export{C as default};
